<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Maven教程</title>
      <link href="/posts/569376207.html"/>
      <url>/posts/569376207.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>网上已经有许多maven的下载和配置教程，本文就不再介绍。</p><hr><h1 id="一、Maven是什么？"><a href="#一、Maven是什么？" class="headerlink" title="一、Maven是什么？"></a>一、Maven是什么？</h1><p>使用maven，最直观的感受是方便。当我们学习或者工作的时候，创建一个项目往往需要大量的jar包，但这些jar包的分布十分广泛，收集所需要的往往要耗费大量的时间。<br><a href="https://maven.apache.org/">Maven</a>是一个项目管理工具，可以对 Java 项目进行构建、依赖管理。我们所使用的jar包可直接由pom.xml文件导入项目使用，极大方便了开发，当然，这只是maven中的一个功能。</p><hr><h1 id="二、Maven命令"><a href="#二、Maven命令" class="headerlink" title="二、Maven命令"></a>二、Maven命令</h1><p><code>网上查找，如有错误，欢迎指出</code></p><h2 id="1-打包命令"><a href="#1-打包命令" class="headerlink" title="1.打包命令"></a>1.打包命令</h2><div class="table-container"><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>mvn compile</td><td>编译,将Java 源程序编译成 class 字节码文件</td></tr><tr><td>mvn test</td><td>测试，并生成测试报告</td></tr><tr><td>mvn clean</td><td>将以前编译得到的旧的 class 字节码文件删除</td></tr><tr><td>mvn pakage</td><td>动态 web工程打 war包，Java工程打 jar 包</td></tr><tr><td>mvn install</td><td>将项目生成 jar 包放在仓库中，供其它模块调用</td></tr><tr><td>mvn clean install -Dmaven.test.skip=true</td><td>跳过单测打包，并把打好的包上传到本地仓库</td></tr><tr><td>mvn clean package -Dmaven.test.skip=true</td><td>跳过单测打包</td></tr><tr><td>mvn clean deploy -Dmaven.test.skip=true</td><td>跳过单测打包，并把打好的包上传到远程仓库</td></tr></tbody></table></div><h2 id="2-常用命令"><a href="#2-常用命令" class="headerlink" title="2.常用命令"></a>2.常用命令</h2><div class="table-container"><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>mvn -v</td><td>查看maven版本</td></tr><tr><td>mvn validate</td><td>验证工程是否正确，所有需要的资源是否可用</td></tr><tr><td>mvn compile</td><td>自动下载依赖jar，为代码生成字节码文件</td></tr><tr><td>mvn test-compile</td><td>编译测试代码</td></tr><tr><td>mvn verify</td><td>此命令构建项目，运行所有测试用例并对集成测试的结果运行任何检查，以确保满足质量标准</td></tr><tr><td>mvn deploy</td><td>此命令用于将工件部署到远程存储库</td></tr><tr><td>mvn site</td><td>为项目生成一个站点</td></tr><tr><td>mvn archetype:create -DgroupId=packageName -DartifactId=projectName</td><td>创建Maven的普通java项目</td></tr><tr><td>mvn archetype:create -DgroupId=packageName -DartifactId=webappName -DarchetypeArtifactId=maven-archetype-webapp</td><td>创建web项目</td></tr><tr><td>mvn clean</td><td>清理maven项目</td></tr><tr><td>mvn eclipse:eclipse</td><td>生成eclipse项目</td></tr><tr><td>mvn eclipse:clean</td><td>清理eclipse配置</td></tr><tr><td>mvn idea: idea</td><td>生成idea项目</td></tr><tr><td>mvn integration-test</td><td>在集成测试可以运行的环境中处理和发布包</td></tr><tr><td>mvn dependency:tree</td><td>显示maven依赖树</td></tr><tr><td>mvn dependency:list</td><td>显示maven依赖列表</td></tr><tr><td>mvn dependency:analyze</td><td>查看依赖的工具</td></tr><tr><td>mvn dependency:sources</td><td>下载依赖包的源码</td></tr><tr><td>mvn -Dmaven.test.skip=true</td><td>忽略测试文档编译</td></tr><tr><td>mvn help:system</td><td>显示平台详细信息</td></tr><tr><td>mvn help:active-profiles</td><td>查看当前激活的profiles</td></tr><tr><td>mvn help:all-profiles</td><td>查看所有profiles</td></tr><tr><td>mvn help:effective -pom</td><td>查看完整的pom信息</td></tr></tbody></table></div><h2 id="3-web项目相关命令"><a href="#3-web项目相关命令" class="headerlink" title="3.web项目相关命令"></a>3.web项目相关命令</h2><div class="table-container"><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>mvn tomcat:run</td><td>启动tomcat</td></tr><tr><td>mvn jetty:run</td><td>启动jetty</td></tr><tr><td>mvn tomcat:deploy</td><td>运行打包部署</td></tr><tr><td>mvn tomcat:undeploy</td><td>撤销部署</td></tr><tr><td>mvn tomcat:start</td><td>启动web应用</td></tr><tr><td>mvn tomcat:stop</td><td>停止web应用</td></tr><tr><td>mvn tomcat:redeploy</td><td>重新部署</td></tr><tr><td>mvn war:exploded tomcat:exploded</td><td>部署展开的war文件</td></tr></tbody></table></div><hr><h1 id="三、分模块开发与设计"><a href="#三、分模块开发与设计" class="headerlink" title="三、分模块开发与设计"></a>三、分模块开发与设计</h1><p>我们的程序按照不同的功能是可以分成不同的模块来开发的，将原始的模块按照功能拆分成若干个子模块，方便模块的相互调用，接口共享就是分模块开发。</p><p>Maven中，将子模块进行打包（jar包），然后导入主模块的pom.xml文件中即可实现多模块开发。</p><hr><h1 id="四、依赖管理"><a href="#四、依赖管理" class="headerlink" title="四、依赖管理"></a>四、依赖管理</h1><p>Maven 一个核心的特性就是依赖管理。当我们处理多模块的项目（包含成百上千个模块或者子项目），模块间的依赖关系就变得非常复杂，管理也变得很困难。针对此种情形，Maven 提供了一种高度控制的方法。</p><p><img src="https://images.xcnv.com/2022/09/17/6325c9c733a9d.png" alt=""></p><h2 id="1-依赖传递"><a href="#1-依赖传递" class="headerlink" title="1.依赖传递"></a>1.依赖传递</h2><p>Maven 的依赖传递机制是指：不管 Maven 项目存在多少间接依赖，POM 中都<strong>只需要定义其直接依赖</strong>，不必定义任何间接依赖，Maven 会自动读取当前项目各个直接依赖的 POM，将那些必要的间接依赖以传递性依赖的形式引入到当前项目中。此机制能够帮助用户一定程度上简化 POM 的配置。</p><blockquote><p><strong>直接依赖：</strong><br>在当前项目中通过依赖配置建立的依赖关系</p><p><strong>间接依赖：</strong><br>被依赖的资源依赖别的资源，当前项目间接依赖其它资源</p></blockquote><p>对于图1主模块来说，空间1是直接依赖，空间2-5是间接依赖</p><hr><h2 id="2-依赖冲突"><a href="#2-依赖冲突" class="headerlink" title="2.依赖冲突"></a>2.依赖冲突</h2><p>当我们导入一个依赖时，可能会出现一个问题。依赖1的间接依赖5版本高于子模块1中的依赖5，那么对于主模块来说，他会使用哪一个呢？这就是依赖冲突。</p><p>对于上述问题，maven给出3种方法：<strong>路径优先</strong>、<strong>声明优先</strong>和<strong>特殊优先</strong></p><blockquote><p>1.特殊优先：同级（不同空间）配置了相同资源的不同版本，后配置的优先级高于先配置的<br>优先执行2.12.6.1的版本<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>2.路径优先：一个项目中出现相同资源时，层级越高，优先级越低<br>图1中空间2的依赖5优先级高于空间4中的依赖5</p><p>3.声明优先：当在同一空间时，配置靠前的优先配置靠后的</p></blockquote><h2 id="3-可选依赖"><a href="#3-可选依赖" class="headerlink" title="3.可选依赖"></a>3.可选依赖</h2><p>如图1，当主模块想要排除间接依赖7，我们可以使用 <strong>&lt; optional&gt;</strong> 来排除依赖7，默认为false，当要排除时设为true。隐藏后的资源不具有依赖的传递性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-排除依赖"><a href="#4-排除依赖" class="headerlink" title="4.排除依赖"></a>4.排除依赖</h2><p>当我们在开发项目时，往往要用到他人开发的jar包，但是他人jar包中的一些依赖可能会对我们的项目有一定的影响（依赖冲突），但我们不可能在它的依赖中写入可选依赖，这时我们就可以使用排除依赖来排除不需要的依赖。<br><code>必须在引入的依赖中排除它的依赖，以下仅为举例</code></p><h2 id=""><a href="#" class="headerlink" title=""></a><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置排除 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置具体排除--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.protobuf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>protobuf-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.11.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></h2><h1 id="五、聚合与继承"><a href="#五、聚合与继承" class="headerlink" title="五、聚合与继承"></a>五、聚合与继承</h1><h2 id="1-聚合"><a href="#1-聚合" class="headerlink" title="1.聚合"></a>1.聚合</h2><p><img src="https://images.xcnv.com/2022/09/17/6325ca0fd722b.png" alt=""></p><p>在我们开发中会产生很多的模块，如果在构建项目时，一个一个模块的构建会非常消耗我们都时间和精力。maven提出的聚合功能就很好的帮助我们解决了这个问题，使用它来解决批量模块同步构建。</p><p>使用聚合时，我们首先要创建一个<strong>聚合模块</strong>来管理其它的模块，里面<strong>只有pom.xml文件</strong>,并无其它实质性的内容。</p><p>在聚合模块中，我们需要将它的打包方式设置为pom，这是聚合模块与其它模块的最大区别。<br>使用 <strong>&lt; modules&gt;</strong> 将要聚和的模块引入即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hewen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_00<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>maven_00 Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../maven_01<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../maven_02_domain<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../maven_03_dao<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-继承"><a href="#2-继承" class="headerlink" title="2.继承"></a>2.继承</h2><p><img src="https://images.xcnv.com/2022/09/17/6325ca3bf0763.png" alt=""></p><p>我们提出3个问题？</p><blockquote><p>1.图3中的三个模块中都有依赖1-2，有没有一种方法可以一次性导入呢？</p><p>2.只有模块1-2有依赖3，可不可以简化导入呢？</p><p>3.如果我需要改变模块3中的依赖2版本，同时模块1-2的也需要改，可不可以一次性操作呢？</p></blockquote><p>和Java的继承类似，maven也提出了继承来解决以上的三个问题。<br>当一个项目包含多个模块时，可以在该项目中再创建一个父模块，并在其 pom.xml 中声明依赖，它的子模块的  pom.xml 可通过继承父模块的  pom.xml 来获得对相关依赖的声明。对于父模块而言，其目的是为了消除子模块  pom.xml 中的重复配置，其中不包含有任何实际代码，因此父模块 pom.xml 的打包类型（packaging）也必须是 pom。</p><p><strong><em>父模块：</em></strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hewen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_00<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>maven_00 Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../../maven_01/maven_01<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../../maven_02_domain/maven_02_domain<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../../maven_03_dao/maven_03_dao<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--引入domain包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hewen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_02_domain<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>maven_00<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong><em>子模块：</em></strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hewen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_01<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>maven_01 Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--继承--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hewen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_00<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--relativePath不是必须需要--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../maven_00/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>maven_01<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在我们来看第二个问题，假设在子模块中不需要主模块中的org.springframework，我们就可以使用 <strong>&lt; dependencyMangement&gt;</strong> 来实现。</p><p><strong><em>主模块：</em></strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyMangement</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyMangement</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong><em>子模块：</em></strong>  <code>子模块中不需要再写版本号</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="六、属性"><a href="#六、属性" class="headerlink" title="六、属性"></a>六、属性</h1><p>一个项目里面的依赖多的可以达到50个以上，当我们需要更改一些依赖的版本时就会变得麻烦，需要不停的上下翻找。而属性可以帮我们更方便的<strong>管理依赖版本</strong>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-webmvc&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-webmvc</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">spring-webmvc</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>属性</th><th>引用格式</th></tr></thead><tbody><tr><td>内置属性</td><td>${属性名}</td></tr><tr><td>Java系统属性</td><td>${系统属性分类.系统属性名}</td></tr><tr><td>环境变量属性</td><td>${env.环境变量属性名}</td></tr><tr><td>Setting属性</td><td>${setting.属性名}</td></tr><tr><td>自定义属性（上文）</td><td>${属性名}</td></tr></tbody></table></div><hr><h1 id="七、版本管理（了解）"><a href="#七、版本管理（了解）" class="headerlink" title="七、版本管理（了解）"></a>七、版本管理（了解）</h1><div class="table-container"><table><thead><tr><th>工程版本</th><th>发布版本</th></tr></thead><tbody><tr><td>SNAPSHOT（测试版）</td><td>alpha版</td></tr><tr><td>RELEASE（稳定版）</td><td>beta版</td></tr><tr><td>———————————————</td><td>纯数字版</td></tr></tbody></table></div><hr><h1 id="八、多环境开发与应用"><a href="#八、多环境开发与应用" class="headerlink" title="八、多环境开发与应用"></a>八、多环境开发与应用</h1><h2 id="1-多环境"><a href="#1-多环境" class="headerlink" title="1.多环境"></a>1.多环境</h2><p>在项目开发的过程中，经常需要面对不同的运行环境（开发环境、测试环境、生产环境、内网环境、外网环境等等），在不同的环境中，相关的配置一般不一样，比如数据源配置、日志文件配置、以及一些软件运行过程中的基本配置。每次在不同环境部署程序时，都需要修改相应的配置文件。这么做存在一个比较大的问题：每次修改配置非常麻烦，而且配置错误会产生不可预估的影响。</p><p>在属性一节中，pom还可以加载配置文件的属性，这样就可以做到依据需求改变不同的环境。</p><p>这里以连接数据库为例：<br>jdbc.properties配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver=$&#123;driver&#125;</span><br><span class="line">jdbc.url=$&#123;url&#125;</span><br><span class="line">jdbc.username=$&#123;username&#125;</span><br><span class="line">jdbc.password=$&#123;password&#125;</span><br></pre></td></tr></table></figure><p>主模块配置多环境：<br>我们也可以不使用 <strong>&lt; activation&gt;</strong> 来配置默认启动环境，只需要输入命令<br><code>mvn install -P 环境id</code>即可。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--开发环境--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>dep<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">driver</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">driver</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">url</span>&gt;</span>jdbc:mysql://localhost:3306/dep<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">username</span>&gt;</span>root<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">password</span>&gt;</span>147258<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--默认启动环境--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--测试环境--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>test<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">driver</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">driver</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">url</span>&gt;</span>jdbc:mysql://157.55.39.151:3306/test<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">username</span>&gt;</span>root<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">password</span>&gt;</span>154564<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--上线环境--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>online<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">driver</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">driver</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">url</span>&gt;</span>jdbc:mysql://157.56.39.161:3306/online<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">username</span>&gt;</span>root<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">password</span>&gt;</span>154564<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="2-跳过测试"><a href="#2-跳过测试" class="headerlink" title="2.跳过测试"></a>2.跳过测试</h2><p>Maven 构建（build）生命周期是由以下几个阶段的序列组成的：<br>|  阶段   | 处理  | 描述 |<br>|  ——  | ——  | ——  |<br>|验证 validate|验证项目|验证项目是否正确且所有必须信息是可用的|<br>|编译 compile|执行编译|    源代码编译在此阶段完成|<br>|测试 Test|测试|使用适当的单元测试框架（例如JUnit）运行测试|<br>|包装 package|打包|创建jar/war包如在 pom.xml 中定义提及的包|<br>|检查 verify|检查|    对集成测试的结果进行检查，以保证质量达标|<br>|安装 install| 安装|    安装打包的项目到本地仓库，以供其他项目使用|<br>|部署 deploy|部署|拷贝最终的工程包到远程仓库中，以共享给其他开发人员和工程|</p><p>在maven构建的时候，可能有些功能我们无法进行测试，此时就无法完成整个项目的打包部署。跳过测试则可以帮我们跳过一些暂时不需要的测试，使用<code>mvn 指令 -D skipTests</code>即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">piugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--包含--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">include</span>&gt;</span>目录<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--排除--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>目录<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">piugin</span>&gt;</span></span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>REST风格和入门案例</title>
      <link href="/posts/2939420653.html"/>
      <url>/posts/2939420653.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、REST是什么？"><a href="#一、REST是什么？" class="headerlink" title="一、REST是什么？"></a>一、REST是什么？</h1><p>REST即表述性状态传递（英文：Representational State Transfer，简称REST）是Roy Fielding博士在2000年他的博士论文中提出来的<strong>一种软件架构风格</strong>。它是一种针对网络应用的设计和开发方式，可以降低开发的复杂性，提高系统的可伸缩性。</p><p>根据REST风格对资源进行访问称为<strong>RESTful</strong></p><p>话不多说，先看以下内容</p><blockquote><p><strong>传统风格资源描述形式</strong><br>localhost/user/saveUser<br>localhost/user/getById?id=1</p><p><strong>REST风格描述形式</strong><br>localhost/user/user<br>localhost/user/user/1</p></blockquote><p>对于传统风格的资源描述形式，它的描述性非常的强，我们可以看到它是保存一个user。<br>但是也可以看到它的书写是非常的麻烦。相对于传统的形式，rest有以下优点。</p><ul><li>隐藏资源的访问行为，无法通过地址得知对资源的何种操作</li><li>使请求路径变得更加简洁</li><li>传递、获取参数值更加方便，框架会自动进行类型转换</li><li>安全，请求路径中直接传递参数值，并用斜线/分隔，不会暴露传递给方法的参数变量名。</li></ul><hr><h1 id="二、怎么用？"><a href="#二、怎么用？" class="headerlink" title="二、怎么用？"></a>二、怎么用？</h1><h2 id="1-请求"><a href="#1-请求" class="headerlink" title="1.请求"></a>1.请求</h2><blockquote><p>GET   (查询)</p><p>POST （新增/保存）</p><p>PUT  （修改/更新）</p><p>DELETE （删除）</p></blockquote><p><code>http请求方式还有很多(8种)，但在SpringMVC中目前只支持以上4种</code></p><h2 id="2-行为"><a href="#2-行为" class="headerlink" title="2.行为"></a>2.行为</h2><blockquote><p><a href="http://localhost/users--------------------查询全部用户信息----------GET">http://localhost/users--------------------查询全部用户信息----------GET</a>   (查询)</p><p><a href="http://localhost/users/1------------------查询指定用户信息----------GET">http://localhost/users/1------------------查询指定用户信息----------GET</a> （查询）</p><p><a href="http://localhost/users---------------------添加用户信息----------------POST（新增/保存）">http://localhost/users---------------------添加用户信息----------------POST（新增/保存）</a></p><p><a href="http://localhost/users---------------------修改用户信息-----------------PUT">http://localhost/users---------------------修改用户信息-----------------PUT</a>  （修改/更新）</p><p><a href="http://localhost/users/1-------------------删除用户信息----------------DELETE">http://localhost/users/1-------------------删除用户信息----------------DELETE</a> （删除）</p></blockquote><p><code>描述模块的名称通常使用复数，也就是加s的格式描述，表示此类资源</code></p><hr><h2 id="3-入门案例"><a href="#3-入门案例" class="headerlink" title="3.入门案例"></a>3.入门案例</h2><p>通过 <strong>@PathVariable</strong> 可以将 URL 中占位符参数绑定到控制器处理方法的入参中:URL 中的 {xxx} 占位符可以通过</p><h3 id="1-非简化"><a href="#1-非简化" class="headerlink" title="(1)非简化"></a>(1)非简化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hewen.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hewen.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置当前请求方法为POST，表示REST风格中的添加操作</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/users&quot;,method = RequestMethod.POST)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user save...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user save&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置当前请求方法为DELETE，表示REST风格中的删除操作</span></span><br><span class="line">    <span class="comment">//@PathVariable注解用于设置路径变量（路径参数），要求路径上设置对应的占位符，并且占位符名称与方法形参名称相同</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/users/&#123;id&#125;&quot;,method = RequestMethod.DELETE)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user delete...&quot;</span> + id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user delete&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置当前请求方法为PUT，表示REST风格中的修改操作</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/users&quot;,method = RequestMethod.PUT)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user update...&quot;</span>+user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user update&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置当前请求方法为GET，表示REST风格中的查询操作</span></span><br><span class="line">    <span class="comment">//@PathVariable注解用于设置路径变量（路径参数），要求路径上设置对应的占位符，并且占位符名称与方法形参名称相同</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/users/&#123;id&#125;&quot; ,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user getById...&quot;</span>+id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user getById&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置当前请求方法为GET，表示REST风格中的查询操作</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/users&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAll</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user getAll...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user getAll&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-简化"><a href="#2-简化" class="headerlink" title="(2)简化"></a>(2)简化</h3><p>对于UserController类中每个API都有 <strong>@ResponseBody</strong>注解，我们不妨有一个大胆的想法，可不可以把它合并同类项，直接放在类名上面呢？答案是肯定的。</p><p>此时，在类上就有了两个注解，<strong>@Controller</strong>和 <strong>@ResponseBody</strong>，在Spring中，我们可以使用 <strong>@RestController</strong> 注解替换@Controller与@ResponseBody注解，简化书写。</p><p>当我们使用 <em>@RequestMapping(value = “/users/{id}” ,method = RequestMethod.GET)</em> 时，我们要在每个API前写上/users，可以使用 <strong>@RequestMapping(“/users”)</strong> 注解写在类名上</p><p>那对于 <strong>@RequestMapping()</strong> 我们是不是也可以想想办法呢</p><blockquote><p>@RequestMapping( method = RequestMethod.POST)<br> ↓<br>      @PostMapping</p><p>@RequestMapping(value = “/{id}” ,method = RequestMethod.DELETE)<br>↓<br>@DeleteMapping(“/{id}”)</p><p>@RequestMapping(method = RequestMethod.PUT)<br>↓<br>@PutMapping</p><p>@RequestMapping(value = “/{id}” ,method = RequestMethod.GET)<br>↓<br>@GetMapping(“/{id}”)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hewen.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hewen.domain.Book;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@Controller</span></span><br><span class="line"><span class="comment">//@ResponseBody配置在类上可以简化配置，表示设置当前每个方法的返回值都作为响应体</span></span><br><span class="line"><span class="comment">//@ResponseBody</span></span><br><span class="line"><span class="meta">@RestController</span>     <span class="comment">//使用@RestController注解替换@Controller与@ResponseBody注解，简化书写</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @RequestMapping( method = RequestMethod.POST)</span></span><br><span class="line">    <span class="meta">@PostMapping</span>        <span class="comment">//使用@PostMapping简化Post请求方法对应的映射配置</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book save...&quot;</span> + book);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book save&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @RequestMapping(value = &quot;/&#123;id&#125;&quot; ,method = RequestMethod.DELETE)</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span>     <span class="comment">//使用@DeleteMapping简化DELETE请求方法对应的映射配置</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book delete...&quot;</span> + id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book delete&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @RequestMapping(method = RequestMethod.PUT)</span></span><br><span class="line">    <span class="meta">@PutMapping</span>         <span class="comment">//使用@PutMapping简化Put请求方法对应的映射配置</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book update...&quot;</span>+book);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book update&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @RequestMapping(value = &quot;/&#123;id&#125;&quot; ,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span>    <span class="comment">//使用@GetMapping简化GET请求方法对应的映射配置</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book getById...&quot;</span>+id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book getById&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @RequestMapping(method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@GetMapping</span>             <span class="comment">//使用@GetMapping简化GET请求方法对应的映射配置</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAll</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book getAll...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book getAll&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h1><p>文章注解汇总</p><ul><li><strong>@PathVariable</strong> 注解用于设置路径变量（路径参数），要求路径上设置对应的占位符，并且占位符名称与方法形参名称相同<ul><li><strong>@RestController</strong> 注解替换@Controller与@ResponseBody注解，简化书写</li><li><strong>@RequestMapping()</strong> 注解的作用就是将请求和处理请求的控制器方法关联起来,建立映射关系。</li><li><strong>@PostMapping</strong> 简化Post请求方法对应的映射配置</li><li><strong>@DeleteMapping</strong>简化DELETE请求方法对应的映射配置</li><li><strong>@PutMapping</strong>简化Put请求方法对应的映射配置</li><li><strong>@GetMapping</strong>简化GET请求方法对应的映射配置</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> ssm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring依赖注入</title>
      <link href="/posts/2488563347.html"/>
      <url>/posts/2488563347.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>本文仅限注解的具体使用，具体注解的是什么，为什么，原理等可以参考其它文章，本文也有其它文章的链接</p></blockquote><p><a href="https://blog.csdn.net/weixin_63802890/article/details/126134574"><br>本文承接我写的这篇文章</a></p><hr><h1 id="一、注解开发bean的生命周期与作用范围"><a href="#一、注解开发bean的生命周期与作用范围" class="headerlink" title="一、注解开发bean的生命周期与作用范围"></a>一、注解开发bean的生命周期与作用范围</h1><p>项目结构：<br><img src="https://images.xcnv.com/2022/11/02/63614cba3b911.png" alt=""></p><h2 id="1-作用范围"><a href="#1-作用范围" class="headerlink" title="1.作用范围"></a>1.作用范围</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hewen.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hewen.dao.BookDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Scope;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.PreDestroy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span>   <span class="comment">//数据层定义bean</span></span><br><span class="line"><span class="comment">//@Scope设置bean的作用范围</span></span><br><span class="line"><span class="meta">@Scope(&quot;singleton&quot;)</span>  <span class="comment">//调创建的对象是不是单例，默认为单例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//@PostConstruct设置bean的初始化方法</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//@PreDestroy设置bean的销毁方法</span></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@Scope()</strong> 注解控制作用范围</p><ol><li><strong>singleton</strong>表示这个bean在spring容器中是<strong>单例</strong>的，我们通过spring容器获取这个bean的时候，都是对一个对象进行操作。</li><li><strong>prototype</strong>表示这个bean在容器中<strong>不是单例</strong>的，每次通过spring容器获取到的实例都是一个新的实例。</li><li><strong>request</strong>表示按照HTTP Request返回一个<strong>单一</strong>的Bean实例。</li><li><strong>session</strong>表示按照HTTP Session返回一个<strong>单一</strong>的Bean实例。</li><li><strong>globalSession</strong>表示按照Global HTTP Session返回一个<strong>单一</strong>的Bean实例。</li></ol><h2 id="2-生命周期"><a href="#2-生命周期" class="headerlink" title="2.生命周期"></a>2.生命周期</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hewen.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hewen.dao.BookDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Scope;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.PreDestroy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span>   <span class="comment">//数据层定义bean</span></span><br><span class="line"><span class="comment">//@Scope设置bean的作用范围</span></span><br><span class="line"><span class="meta">@Scope(&quot;singleton&quot;)</span>  <span class="comment">//调创建的对象是不是单例，默认为单例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//@PostConstruct设置bean的初始化方法</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//@PreDestroy设置bean的销毁方法</span></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>@PostConstruct</strong>设置bean的<strong>初始化</strong>方法</li><li><strong>@PreDestroy</strong>设置bean的<strong>销毁</strong>方法</li></ul><h2 id="3-运行结果："><a href="#3-运行结果：" class="headerlink" title="3.运行结果："></a>3.运行结果：</h2><p><img src="https://images.xcnv.com/2022/11/02/63614ccc4fc61.png" alt=""></p><h1 id="二、依赖注入"><a href="#二、依赖注入" class="headerlink" title="二、依赖注入"></a>二、依赖注入</h1><p>代码结构：</p><p><img src="https://images.xcnv.com/2022/11/02/63614cd8527ba.png" alt=""></p><h2 id="1-注入简单类型："><a href="#1-注入简单类型：" class="headerlink" title="1.注入简单类型："></a>1.注入简单类型：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hewen.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hewen.dao.BookDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository(&quot;bookDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="comment">//@Value：注入简单类型（无需提供set方法）</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">/**本可以写成    private String name=“东方”;   但为了达到解耦的目的，就使用此写法*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> <strong>@Value()</strong> 可用来注入简单类型，括号里面可以直接填入需要注入的值，如@Value(451)，但是这样就和直接赋值没有什么区别，达不到解耦的目的，于是可以在resourses目录中写好需要注入的值，</p><p><img src="https://images.xcnv.com/2022/11/02/63614ce59c1b6.png" alt=""></p><p> 同时在配置类中加入 <strong>@PropertySource</strong> ({“jdbc.properties”})引入文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hewen.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.hewen&quot;)</span></span><br><span class="line"><span class="comment">//@PropertySource加载properties配置文件</span></span><br><span class="line"><span class="meta">@PropertySource(&#123;&quot;jdbc.properties&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://images.xcnv.com/2022/11/02/63614cf49d36b.png" alt=""></p><h3 id="1-注："><a href="#1-注：" class="headerlink" title="(1)注："></a>(1)注：</h3><p><img src="https://images.xcnv.com/2022/11/02/63614d051c3f3.png" alt=""></p><h2 id="2-注入引用类型："><a href="#2-注入引用类型：" class="headerlink" title="2.注入引用类型："></a>2.注入引用类型：</h2><h3 id="1-按类型装配"><a href="#1-按类型装配" class="headerlink" title="(1)按类型装配"></a>(1)按类型装配</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hewen.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hewen.dao.BookDao;</span><br><span class="line"><span class="keyword">import</span> com.hewen.service.BookService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="comment">//@Autowired：注入引用类型，自动装配模式，默认按类型装配</span></span><br><span class="line">    <span class="meta">@Autowired</span>     <span class="comment">//暴力反射，不需要使用set注入</span></span><br><span class="line">    <span class="comment">//@Qualifier：自动装配bean时按bean名称装配</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;bookDao&quot;)</span>   <span class="comment">//想注谁，就把谁的bean名称写上</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    public void setBookDao(BookDao bookDao) &#123;</span></span><br><span class="line"><span class="comment">        this.bookDao = bookDao;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>@Autowired</strong>注解用来引用注入，可以标注在<strong>属性</strong>上、<strong>方法</strong>上和<strong>构造器</strong>上，来完成自动装配。默认是根据属性类型装配，spring自动将匹配到的属性值进行注入。可以无需使用set方法，进行暴力反射。<a href="https://blog.csdn.net/weixin_45755816/article/details/118654961">@Autowired详解</a></p><h3 id="2-按名称装配"><a href="#2-按名称装配" class="headerlink" title="(2)按名称装配"></a>(2)按名称装配</h3><p>但是当有多个相同类型的bean，此时应该如何指定呢？这是我们就需要按照名称装配。</p><p><img src="https://images.xcnv.com/2022/11/02/63614d1bf3d48.png" alt=""></p><p>分别在数据层的@Repository注解上命名(如上图所示)，使用 <strong>@Qualifier</strong>(“bookDao”)来指定想注入的名称</p><h3 id="3-注"><a href="#3-注" class="headerlink" title="(3)注"></a>(3)注</h3><p><img src="https://images.xcnv.com/2022/11/02/63614d2e1fd24.png" alt=""></p><p><img src="https://images.xcnv.com/2022/11/02/63614d3b4d377.png" alt=""></p><h1 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h1><p>本文提到的注解有：</p><ul><li>@Scope()</li><li>@PostConstruct</li><li>@PreDestroy</li><li>@Value()</li><li>@Autowired</li><li>@Qualifier</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring纯注解开发</title>
      <link href="/posts/2431550013.html"/>
      <url>/posts/2431550013.html</url>
      
        <content type="html"><![CDATA[<hr><p>你知道吗？昨天下午我被人骂了，她们说我往楼下滴水，把阳台上晾的衣服都打湿了，只有我知道那不是水，是我趴在阳台上想你流的眼泪</p><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>项目结构：</p><p><img src="https://images.xcnv.com/2022/11/02/63614d7c67c10.png" alt=""></p><hr><h1 id="一、Spring纯注解开发"><a href="#一、Spring纯注解开发" class="headerlink" title="一、Spring纯注解开发"></a>一、Spring纯注解开发</h1><h2 id="1-定义bean"><a href="#1-定义bean" class="headerlink" title="1.定义bean"></a>1.定义bean</h2><p><img src="https://images.xcnv.com/2022/11/02/63614d87cbcf6.png" alt=""></p><p>在上图中，需要定义bean，其名称，配置类。采用注解开发模式，就需要代替上面三个步骤。</p><ol><li>在要定义的类上加上注解@Component()</li><li>定义名称@Component(“bookDao”)</li><li>配置文件需要知道这个，就需要在配置文件中加入以下内容来进行扫描：</li></ol><p><img src="https://images.xcnv.com/2022/11/02/63614d964d9c9.png" alt=""></p><p> <strong>注</strong>：@componet()在所以类中均可使用，在web开发中也可使用以下，和它没有区别</p><ul><li>@Controller()     表现层</li><li>@Service()         业务层</li><li>@Repository()    数据层</li></ul><h2 id="3-纯注解开发模式"><a href="#3-纯注解开发模式" class="headerlink" title="3.纯注解开发模式"></a>3.纯注解开发模式</h2><p>上面我们依然使用了配置文件，在这次中，我们就将配置文件全部删除，真正做到纯注解。</p><h3 id="（1）创建配置类："><a href="#（1）创建配置类：" class="headerlink" title="（1）创建配置类："></a>（1）创建配置类：</h3><p>既然没有了配置文件，那么就需要有和配置文件一样效果的东西，这就是配置类<br>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hewen.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**声明当前类为Spring配置类*/</span></span><br><span class="line"><span class="meta">@Configuration</span>    <span class="comment">//相当于配置文件中的外面那一圈</span></span><br><span class="line"><span class="comment">//设置bean扫描路径，多个路径书写为字符串数组格式</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.hewen.service&quot;)</span>   <span class="comment">// 多个用数组形式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>@Configuration</strong>的作用就是定义这个类为配置类</li><li><strong>@ComponentScan()</strong> 设置bean扫描路径</li></ul><p><strong>注</strong>：</p><p><img src="https://images.xcnv.com/2022/11/02/63614da22de32.png" alt=""></p><p>我们看@ComponentScan(）注解的源码就会发现它使用的是字符串数组，所以当设置多个时就要使用数组形式<br>{“com.hewen.service”,”com.hewen.dao”}</p><h3 id="（2）App类："><a href="#（2）App类：" class="headerlink" title="（2）App类："></a>（2）App类：</h3><p>使用了注解开发后，就不需要加载配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.hewen.config.SpringConfig;</span><br><span class="line"><span class="keyword">import</span> com.hewen.dao.BookDao;</span><br><span class="line"><span class="keyword">import</span> com.hewen.service.BookService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppForAnnotation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//AnnotationConfigApplicationContext加载Spring配置类初始化Spring容器</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> (BookDao) ctx.getBean(<span class="string">&quot;bookDao&quot;</span>);</span><br><span class="line">        System.out.println(bookDao);</span><br><span class="line">        <span class="comment">//按类型获取bean</span></span><br><span class="line">        <span class="type">BookService</span> <span class="variable">bookService</span> <span class="operator">=</span> ctx.getBean(BookService.class);</span><br><span class="line">        System.out.println(bookService);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="二、总结："><a href="#二、总结：" class="headerlink" title="二、总结："></a>二、总结：</h1><p><img src="https://images.xcnv.com/2022/11/02/63614daf81460.png" alt=""></p><p><img src="https://images.xcnv.com/2022/11/02/63614dc70b9c0.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/posts/4049607742.html"/>
      <url>/posts/4049607742.html</url>
      
        <content type="html"><![CDATA[<hr><p>嘿！我们私奔吧<br>去充满橘子味的农庄<br>去喝着麦香味啤酒看百年前古堡的始落<br>去带着草帽走在飘满麦穗的小路上<br>喝着一杯鸡尾酒看阳光撒在绿色的树叶上映衬这翠蓝的湖水<br>深陷柔软的沙发里拥抱，和着窗外被大风摧残的树枝亲吻<br>踩着金黄色的树叶没有章法地随意舞蹈<br>开着车大声歌唱，这一刻你和风都在我身旁</p><hr><h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><h2 id="单例模式是什么？"><a href="#单例模式是什么？" class="headerlink" title="单例模式是什么？"></a>单例模式是什么？</h2><p>保证系统中应用该模式的类只有一个实例，即该类只能创建一个对象。</p><h1 id="饿汉单例模式"><a href="#饿汉单例模式" class="headerlink" title="饿汉单例模式"></a>饿汉单例模式</h1><h2 id="饿汉单例是什么？"><a href="#饿汉单例是什么？" class="headerlink" title="饿汉单例是什么？"></a>饿汉单例是什么？</h2><p>在用类创建对象时，对象已经提前创建好<br><strong>优点</strong>：适用于单例对象较少的情况<br><strong>缺点</strong>：所有对象类加载的时候就实例化，如果有很多单例对象存在，初始化时就会导致大量的内存浪费</p><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><ol><li>定义一个类，把构造器私有</li><li>定义静态变量储存对象<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><strong>类</strong>（通过HungryManModel访问该类的instance对象）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> hk;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉单例模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HungryManModel</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * public 对方可以访问</span></span><br><span class="line"><span class="comment">     * 对象只能是一个，所以用static静态成员变量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> HungryManModel instance=<span class="keyword">new</span> <span class="title class_">HungryManModel</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *私有化构造器,不是私有的化，可以创建多个对象</span></span><br><span class="line"><span class="comment">    *一定要写出来并定义为private，因为有默认的</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">HungryManModel</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Test类</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> hk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//调用静态变量，       类名.变量名</span></span><br><span class="line">        HungryManModel h1=HungryManModel.instance;</span><br><span class="line">        HungryManModel h2=HungryManModel.instance;</span><br><span class="line">        System.out.println(h1);</span><br><span class="line">        System.out.println(h2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果</strong>：</p><p><img src="https://images.xcnv.com/2022/11/02/6361474ee3742.png" alt=""></p><p>由结果可知h1和h2为同一对象</p><hr><h1 id="懒汉单例模式"><a href="#懒汉单例模式" class="headerlink" title="懒汉单例模式"></a>懒汉单例模式</h1><h2 id="饿汉单例是什么？-1"><a href="#饿汉单例是什么？-1" class="headerlink" title="饿汉单例是什么？"></a>饿汉单例是什么？</h2><p>在需要对象的时候才去创建对象</p><h2 id="实现步骤-1"><a href="#实现步骤-1" class="headerlink" title="实现步骤"></a>实现步骤</h2><ol><li>定义类，私有化构造器</li><li>定义一个静态变量存储一个对象</li><li>提供返回对象的方法<h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><strong>类</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> hk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazyMode</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   2.   不能new，否则就变成了饿汉模式</span></span><br><span class="line"><span class="comment">        最好别定义为public，对方如果第一次调用为LazyMode h2=LazyMode.instance;  就会变为null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazyMode instance;</span><br><span class="line">    <span class="comment">//1.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LazyMode</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供方法，对外返回一个单例对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LazyMode <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  3.    不能直接这样写，否则每调一次这个方法，就会产生一个新对象</span></span><br><span class="line"><span class="comment">        instance=new LazyMode();</span></span><br><span class="line"><span class="comment">        return instance;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>)&#123;</span><br><span class="line">            instance=<span class="keyword">new</span> <span class="title class_">LazyMode</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Test类:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> hk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        LazyMode h1=LazyMode.getInstance();</span><br><span class="line">        LazyMode h2=LazyMode.getInstance();</span><br><span class="line">        System.out.println(h1);</span><br><span class="line">        System.out.println(h2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><p><img src="https://images.xcnv.com/2022/11/02/6361474f818e7.png" alt=""></p><p>由结果可知h1和h2为同一对象</p><h2 id="懒汉单例线程安全问题"><a href="#懒汉单例线程安全问题" class="headerlink" title="懒汉单例线程安全问题"></a>懒汉单例线程安全问题</h2><p><img src="https://images.xcnv.com/2022/11/02/6361475027545.png" alt=""></p><p>懒汉单例模式是线程不安全，当调用方法时，首先要经过if判断，在多线程场景下，就可能存在多个线程同时进入if判断，此时对象还未创建，那么就会多个线程都去创建对象，这样单例模式就被破坏了。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>具体可查看这篇文章<br><a href="https://www.jianshu.com/p/8a4cb4f66832">懒汉单例模式解决线程安全问题</a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>从内存角度看，懒汉模式要比饿汉好一些，当调用这个类的其它功能，不需要这个对象时，懒汉模式就不必提前创建对象，节省内存。饿汉模式即使不需要对象，但此时也会创建对象（与类一起加载）。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程创建方式</title>
      <link href="/posts/3058659955.html"/>
      <url>/posts/3058659955.html</url>
      
        <content type="html"><![CDATA[<hr><p>“好想变成雪啊，这样就可以落在她的肩上了……”</p><p>“若是她撑了伞呢？”</p><p>“那就落在她的红伞上，静载一路的月光。”</p><p>“若是她将雪拂去……”</p><p>“那就任她拂去，能在她的手掌上停留一刻，便足矣。”</p><p>“诺是她撑伞的同时快速旋转伞同时自身以一个反方向转这样形成一股气流可以不断吹雪，加上上下横跳的走路灵巧避开所有雪呢？<br>那我就落在地上，任她在我的身体上肆虐</p><hr><h1 id="方式一：继承Thread类"><a href="#方式一：继承Thread类" class="headerlink" title="方式一：继承Thread类"></a>方式一：继承Thread类</h1><blockquote><p>定义一个子类sx继承线程类java.lang.Thread，重写run()方法<br> 创建sx类的对象<br> 调用线程对象的start()方法启动线程（启动后还是执行run方法的）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> create_Thread;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 方式一：</span></span><br><span class="line"><span class="comment"> 定义一个子类MyThread继承线程类java.lang.Thread，重写run()方法</span></span><br><span class="line"><span class="comment"> 创建sx类的对象</span></span><br><span class="line"><span class="comment"> 调用线程对象的start()方法启动线程（启动后还是执行run方法的）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  主线程任务应该放在子线程之后，不然优先执行主线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">create_Thread1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建sx类的对象</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">sx1</span>();</span><br><span class="line">        <span class="comment">//3.调用线程对象的start()方法启动线程</span></span><br><span class="line">        sc.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;父类线程&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.定义一个类继承线程类（Thread）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">sx1</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写run方法，决定以后要干什么</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;子类线程&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ps.主线程任务应该放在子线程之后，不然优先执行主线程.</strong></p><h1 id="方式二：实现Runnable接口"><a href="#方式二：实现Runnable接口" class="headerlink" title="方式二：实现Runnable接口"></a>方式二：实现Runnable接口</h1><blockquote><p>定义一个线程任务类MyRunnable实现Runnable接口，重写run()方法<br> 创建MyRunnable任务对象<br> 把MyRunnable任务对象交给Thread处理。<br> 调用线程对象的start()方法启动线程</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> create_Thread;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 方式二：</span></span><br><span class="line"><span class="comment"> 定义一个线程任务类MyRunnable实现Runnable接口，重写run()方法</span></span><br><span class="line"><span class="comment"> 创建MyRunnable任务对象</span></span><br><span class="line"><span class="comment"> 把MyRunnable任务对象交给Thread处理。</span></span><br><span class="line"><span class="comment"> 调用线程对象的start()方法启动线程</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">create_Thread2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//2.创建一个任务对象</span></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">sx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">sx2</span>();</span><br><span class="line">        <span class="comment">//3.把任务对象交给线程处理</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">jn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(sx);</span><br><span class="line">        <span class="comment">//4.启动线程</span></span><br><span class="line">        jn.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//主线程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;主线程&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.定义一个线程任务类sx2实现Runnable接口，重写run()方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">sx2</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;子线程&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="方式三：实现Callable接口"><a href="#方式三：实现Callable接口" class="headerlink" title="方式三：实现Callable接口"></a>方式三：实现Callable接口</h1><blockquote><p>利用Callable、FutureTask接口实现。<br> 1.得到任务对象<br>   定义类实现Callable接口，重写call方法，封装要做的事情。<br>   创建Callable任务对象<br>   用FutureTask把Callable对象封装成线程任务对象。<br> 2.把线程任务对象交给Thread处理。<br> 3.调用Thread的start方法启动线程，执行任务<br> 4.线程执行完毕后、通过FutureTask的get方法去获取任务执行的结果。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> create_Thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 利用Callable、FutureTask接口实现。</span></span><br><span class="line"><span class="comment"> 1.得到任务对象</span></span><br><span class="line"><span class="comment">   定义类实现Callable接口，重写call方法，封装要做的事情。</span></span><br><span class="line"><span class="comment">   创建Callable任务对象</span></span><br><span class="line"><span class="comment">   用FutureTask把Callable对象封装成线程任务对象。</span></span><br><span class="line"><span class="comment"> 2.把线程任务对象交给Thread处理。</span></span><br><span class="line"><span class="comment"> 3.调用Thread的start方法启动线程，执行任务</span></span><br><span class="line"><span class="comment"> 4.线程执行完毕后、通过FutureTask的get方法去获取任务执行的结果。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">相比前两个方法可以执行返回结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">create_Thread3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.2创建Callable任务对象</span></span><br><span class="line">        Callable&lt;String&gt; gt = <span class="keyword">new</span> <span class="title class_">getSun</span>(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//1.3用FutureTask把Callable对象封装成线程任务对象。</span></span><br><span class="line">        <span class="comment">//  FutureTask对象的作用1： 是Runnable的对象（实现了Runnable接口），可以交给Thread</span></span><br><span class="line">        <span class="comment">//  FutureTask对象的作用2： 可以在线程执行完毕之后通过调用其get方法得到线程执行完成的结果</span></span><br><span class="line">        FutureTask&lt;String&gt; sc = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(gt);</span><br><span class="line">        <span class="comment">//2.把线程任务对象交给Thread处理。</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">sl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(sc);</span><br><span class="line">        <span class="comment">//3.调用Thread的start方法启动线程，执行任务</span></span><br><span class="line">        sl.start();</span><br><span class="line">        <span class="comment">//4.线程执行完毕后、通过FutureTask的get方法去获取任务执行的结果。</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> sc.get();</span><br><span class="line">            System.out.println(result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.1定义类实现Callable接口，重写call方法，封装要做的事情。&lt;&gt;里面线程任务结束后要返回的泛型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">getSun</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;String&gt;&#123;</span><br><span class="line">    <span class="comment">//功能实现：求1-n的和</span></span><br><span class="line">    <span class="comment">//传入n</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">getSun</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.n = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//求和</span></span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            sum+=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;结果为&quot;</span>+sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p><img src="https://images.xcnv.com/2022/11/02/636149a73150e.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Bean生命周期</title>
      <link href="/posts/2670478561.html"/>
      <url>/posts/2670478561.html</url>
      
        <content type="html"><![CDATA[<hr><p>我不太能理解，为什么他们说今晚月色很美是含蓄的表白。<br>直到我看到朝阳下江水漾起的片片金鳞、漆黑的夜空中不甘散去的橘黄云彩、亦或者是夜宵摊子上高谈阔论掺杂着串子被炭火炙烤出油香的烟火气息，都下意识拿出手机想跟你分享。<br>我想把自己觉得美丽的东西传递给你。<br>今天下雨了</p><p>哈哈！</p><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>生命周期：从创建到销毁的完整过程</li><li>bean的生命周期：bean从创建到销毁的整体过程</li><li>bean生命周期控制：在bean<strong>创建后</strong>到<strong>销毁前</strong>做的一些事</li></ul><p>代码结构：</p><p><img src="https://images.xcnv.com/2022/11/02/63614c41a2bdf.png" alt=""></p><hr><h1 id="一、周期控制—-配置模式"><a href="#一、周期控制—-配置模式" class="headerlink" title="一、周期控制—-配置模式"></a>一、周期控制—-配置模式</h1><h2 id="1-代码"><a href="#1-代码" class="headerlink" title="1.代码"></a>1.代码</h2><p>BookDaoImpl类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hewen.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hewen.dao.BookDao;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> heWen</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**表示bean初始化对应的操作**/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;(bean创建前)init...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**表示bean销毁前对应的操作*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;(bean销毁前)destroy...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AppForLifeCycle类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hewen;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hewen.dao.BookDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> heWen</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppForLifeCycle</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**为什么不用ApplicationContext呢？因为我们为了观察到java虚拟机执行了bean的销毁，需要使用.close()方法，</span></span><br><span class="line"><span class="comment">         但是此方法实现ClassPathXmlApplicationContext接口下的实现类*/</span></span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> (BookDao) ctx.getBean(<span class="string">&quot;bookDao&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**注册关闭钩子函数，在虚拟机退出之前回调此函数，关闭容器（观察到java虚拟机执行了bean的销毁也可使用此方法）**/</span></span><br><span class="line">        <span class="comment">//ctx.registerShutdownHook();</span></span><br><span class="line">        <span class="comment">//关闭容器</span></span><br><span class="line">        ctx.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**两种方法的区别：close()方法相对.registerShutdownHook()比较暴力*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xml配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--init-method：设置bean初始化生命周期回调函数（设置初始化方法）--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--destroy-method：设置bean销毁生命周期回调函数，仅适用于单例对象（设置销毁方法）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.hewen.dao.impl.BookDaoImpl&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroy&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-运行结果："><a href="#2-运行结果：" class="headerlink" title="2.运行结果："></a>2.运行结果：</h2><p><img src="https://images.xcnv.com/2022/11/02/63614c4ef3d9b.png" alt=""></p><h2 id="3-模式说明："><a href="#3-模式说明：" class="headerlink" title="3.模式说明："></a>3.模式说明：</h2><p>首先在BookDaoImpl类中创建了创建前和销毁前的方法，但是如何才能执行呢？就需要在xml配置文件中配置，使用init-method标签和destroy-method即可，但是在运行过程中会发现只执行了init()方法，java虚拟机在运行后就直接退出。<strong>容器关闭前才会触发bean的销毁</strong>。</p><h3 id="1-close-方法"><a href="#1-close-方法" class="headerlink" title="1.close()方法"></a>1.close()方法</h3><p>此时需要在AppForLifeCycle类中使用ClassPathXmlApplicationContext接口，为什么不用ApplicationContext呢？因为我们为了观察到java虚拟机执行了bean的销毁，需要使用.close()方法，但是此方法实现ClassPathXmlApplicationContext接口下的实现类。</p><h3 id="2-registerShutdownHook-方法"><a href="#2-registerShutdownHook-方法" class="headerlink" title="2.registerShutdownHook()方法"></a>2.registerShutdownHook()方法</h3><p>.close()方法的使用相对来说比较暴力，一旦把此方法放在创建对象前执行，便会报错，于是我们可以使用.registerShutdownHook()方法，无论放在那里都不会报异常。</p><hr><h1 id="二、周期控制—-接口模式（了解）"><a href="#二、周期控制—-接口模式（了解）" class="headerlink" title="二、周期控制—-接口模式（了解）"></a>二、周期控制—-接口模式（了解）</h1><h2 id="1-代码-1"><a href="#1-代码-1" class="headerlink" title="1.代码"></a>1.代码</h2><p>BookServiceImpl类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hewen.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hewen.dao.BookDao;</span><br><span class="line"><span class="keyword">import</span> com.hewen.service.BookService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.DisposableBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.InitializingBean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> heWen</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**使用接口的方法控制dean的创建和销毁*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span>, InitializingBean, DisposableBean &#123;</span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookDao</span><span class="params">(BookDao bookDao)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;set .....&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.bookDao = bookDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service destroy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**当属性运行完后才会运行此方法，通过setBookDao的输出set的先后就可以了解*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service init&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xml配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--init-method：设置bean初始化生命周期回调函数（设置初始化方法）--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--destroy-method：设置bean销毁生命周期回调函数，仅适用于单例对象（设置销毁方法）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.hewen.dao.impl.BookDaoImpl&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroy&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.hewen.service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-运行结果：-1"><a href="#2-运行结果：-1" class="headerlink" title="2.运行结果："></a>2.运行结果：</h2><p><img src="https://images.xcnv.com/2022/11/02/63614c5c36104.png" alt=""></p><h2 id="3-模式说明：-1"><a href="#3-模式说明：-1" class="headerlink" title="3.模式说明："></a>3.模式说明：</h2><p>此方法直接重写了InitializingBean, DisposableBean接口中的destroy()和afterPropertiesSet()方法，即可不用进行xml的配置。注意观察afterPropertiesSet方法，属性设置之后，意味着当属性运行完后才会运行此方法，通过setBookDao的输出set的先后就可以了解，观察运行结果set…先于service init….运行。</p><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>个人对普通创建对象和Ioc容器创建对象的关联理解：</p><p><img src="https://images.xcnv.com/2022/11/02/63614c68611ed.png" alt=""></p><ol><li>创建对象———-&gt;new 在做的事</li><li>执行构造方法———-&gt;xxxx()</li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC参数传递</title>
      <link href="/posts/146005795.html"/>
      <url>/posts/146005795.html</url>
      
        <content type="html"><![CDATA[<hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文get/post请求使用postman进行完成，具体使用方法可看此文—-&gt;<a href="https://blog.csdn.net/zbj18314469395/article/details/106693615">Postman</a><br><code>提示：User类和Address将会放在文章末尾处</code></p><hr><h1 id="一、请求类型参数"><a href="#一、请求类型参数" class="headerlink" title="一、请求类型参数"></a>一、请求类型参数</h1><h2 id="1-普通参数"><a href="#1-普通参数" class="headerlink" title="1.普通参数"></a>1.普通参数</h2><h3 id="1-参数名与形参名相同"><a href="#1-参数名与形参名相同" class="headerlink" title="1.参数名与形参名相同"></a>1.参数名与形参名相同</h3><p>postman页面：</p><p><img src="https://images.xcnv.com/2022/11/02/63614b151c852.jpg" alt=""></p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//普通参数：请求参数与形参名称对应即可完成参数传递</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/commonParam&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">commonParam</span><span class="params">(String name ,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;普通参数传递 name ==&gt; &quot;</span>+name);</span><br><span class="line">        System.out.println(<span class="string">&quot;普通参数传递 age ==&gt; &quot;</span>+age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;common param&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://images.xcnv.com/2022/11/02/63614b264705d.jpg" alt=""></p><h3 id="2-参数名与形参名不同"><a href="#2-参数名与形参名不同" class="headerlink" title="2.参数名与形参名不同"></a>2.参数名与形参名不同</h3><p>当请求参数名与形参名不同时，使用 <strong>@RequestParam</strong>注解关联请求参数名称与形参名称之间的关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/commonParamDifferentName&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">commonParamDifferentName</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span> String userName , <span class="type">int</span> age)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;普通参数传递 userName ==&gt; &quot;</span>+userName);</span><br><span class="line">        System.out.println(<span class="string">&quot;普通参数传递 age ==&gt; &quot;</span>+age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;common param different name&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2-POJO类型参数"><a href="#2-POJO类型参数" class="headerlink" title="2.POJO类型参数"></a>2.POJO类型参数</h2><p><code>提示：User类中有name和age两个属性</code></p><p>postman：</p><p><img src="https://images.xcnv.com/2022/11/02/63614b3174b55.jpg" alt=""></p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//POJO参数：请求参数与形参对象中的属性对应即可完成参数传递</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/pojoParam&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">pojoParam</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;pojo参数传递 user ==&gt; &quot;</span>+user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;pojo param&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://images.xcnv.com/2022/11/02/63614b4195d39.jpg" alt=""></p><hr><h2 id="3-嵌套POJO类型参数"><a href="#3-嵌套POJO类型参数" class="headerlink" title="3.嵌套POJO类型参数"></a>3.嵌套POJO类型参数</h2><p><code>提示：User类中嵌套Address类</code></p><p>postman：</p><p><img src="https://images.xcnv.com/2022/11/02/63614b4e9f65c.jpg" alt=""></p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//嵌套POJO参数：嵌套属性按照层次结构设定名称即可完成参数传递</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/pojoContainPojoParam&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">pojoContainPojoParam</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;pojo嵌套pojo参数传递 user ==&gt; &quot;</span>+user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;pojo contain pojo param&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://images.xcnv.com/2022/11/02/63614b631405b.jpg" alt=""></p><hr><h2 id="4-数组类型参数"><a href="#4-数组类型参数" class="headerlink" title="4. 数组类型参数"></a>4. 数组类型参数</h2><p>postman：</p><p><img src="https://images.xcnv.com/2022/11/02/63614b6c421f5.jpg" alt=""></p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组参数：同名请求参数可以直接映射到对应名称的形参数组对象中</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/arrayParam&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">arrayParam</span><span class="params">(String[] likes)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;数组参数传递 likes ==&gt; &quot;</span>+ Arrays.toString(likes));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;array param&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://images.xcnv.com/2022/11/02/63614b7b9eb08.jpg" alt=""></p><hr><h2 id="5-集合类型参数"><a href="#5-集合类型参数" class="headerlink" title="5.集合类型参数"></a>5.集合类型参数</h2><p>集合类型参数同名请求参数可以使用 <strong>@RequestParam</strong>注解映射到对应名称的集合对象中作为数据。<br>没有加@RequestParam，会尝试造List&lt; String&gt;类型(引用类型)的对象，报错<code>java.lang.NoSuchMethodException: java.util.List.&lt;init&gt;()</code>，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//集合参数：同名请求参数可以使用@RequestParam注解映射到对应名称的集合对象中作为数据</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/listParam&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">listParam</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;String&gt; likes)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;集合参数传递 likes ==&gt; &quot;</span>+ likes);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;list param&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="二、json数据"><a href="#二、json数据" class="headerlink" title="二、json数据"></a>二、json数据</h1><p>1.加入json的坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.SpringMVC配置类加上注解 <strong>@EnableWebMvc</strong>开启json数据类型自动转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hewen.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.hewen.controller&quot;)</span></span><br><span class="line"><span class="comment">//开启json数据类型自动转换</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="1-json数组"><a href="#1-json数组" class="headerlink" title="1.json数组"></a>1.json数组</h2><p>postman：</p><p><img src="https://images.xcnv.com/2022/11/02/63614b88c46af.jpg" alt=""></p><p>使用 <strong>@RequestBody</strong>注解将外部传递的json数组数据映射到形参的集合对象中作为数据</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//集合参数：json格式</span></span><br><span class="line"><span class="comment">//1.开启json数据格式的自动转换，在配置类中开启@EnableWebMvc</span></span><br><span class="line"><span class="comment">//2.使用@RequestBody注解将外部传递的json数组数据映射到形参的集合对象中作为数据</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/listParamForJson&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">listParamForJson</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;String&gt; likes)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;list common(json)参数传递 list ==&gt; &quot;</span>+likes);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;list common for json param&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://images.xcnv.com/2022/11/02/63614b93d531e.jpg" alt=""></p><hr><h2 id="2-json对象-POJO"><a href="#2-json对象-POJO" class="headerlink" title="2.json对象(POJO)"></a>2.json对象(POJO)</h2><p>postman：</p><p><img src="https://images.xcnv.com/2022/11/02/63614ba080363.jpg" alt=""></p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//POJO参数：json格式</span></span><br><span class="line"><span class="comment">//1.开启json数据格式的自动转换，在配置类中开启@EnableWebMvc</span></span><br><span class="line"><span class="comment">//2.使用@RequestBody注解将外部传递的json数据映射到形参的实体类对象中，要求属性名称一一对应</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/pojoParamForJson&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">pojoParamForJson</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;pojo(json)参数传递 user ==&gt; &quot;</span>+user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;pojo for json param&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://images.xcnv.com/2022/11/02/63614bad43e48.jpg" alt=""></p><h2 id="3-json数组-POJO"><a href="#3-json数组-POJO" class="headerlink" title="3.json数组(POJO)"></a>3.json数组(POJO)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//集合参数：json格式</span></span><br><span class="line"><span class="comment">//1.开启json数据格式的自动转换，在配置类中开启@EnableWebMvc</span></span><br><span class="line"><span class="comment">//2.使用@RequestBody注解将外部传递的json数组数据映射到形参的保存实体类对象的集合对象中，要求属性名称一一对应</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/listPojoParamForJson&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">listPojoParamForJson</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;User&gt; list)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;list pojo(json)参数传递 list ==&gt; &quot;</span>+list);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;list pojo for json param&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://images.xcnv.com/2022/11/02/63614bbf7dd0f.jpg" alt=""></p><hr><h1 id="三、日期型参数"><a href="#三、日期型参数" class="headerlink" title="三、日期型参数"></a>三、日期型参数</h1><p>使用 <strong>@DateTimeFormat</strong>注解设置日期类型数据格式，默认格式yyyy/MM/dd</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//日期参数</span></span><br><span class="line"><span class="comment">//使用@DateTimeFormat注解设置日期类型数据格式，默认格式yyyy/MM/dd</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/dataParam&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">dataParam</span><span class="params">(Date date,</span></span><br><span class="line"><span class="params">                        <span class="meta">@DateTimeFormat(pattern=&quot;yyyy-MM-dd&quot;)</span> Date date1,</span></span><br><span class="line"><span class="params">                        <span class="meta">@DateTimeFormat(pattern=&quot;yyyy/MM/dd HH:mm:ss&quot;)</span> Date date2)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;参数传递 date ==&gt; &quot;</span>+date);</span><br><span class="line">    System.out.println(<span class="string">&quot;参数传递 date1(yyyy-MM-dd) ==&gt; &quot;</span>+date1);</span><br><span class="line">    System.out.println(<span class="string">&quot;参数传递 date2(yyyy/MM/dd HH:mm:ss) ==&gt; &quot;</span>+date2);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;data param&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="四、源码"><a href="#四、源码" class="headerlink" title="四、源码"></a>四、源码</h1><p>结构：</p><p><img src="https://images.xcnv.com/2022/11/02/63614bd276298.jpg" alt=""></p><p>User类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hewen.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, address=&quot;</span> + address +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Address <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(Address address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    public String toString() &#123;</span></span><br><span class="line"><span class="comment">//        return &quot;User&#123;&quot; +</span></span><br><span class="line"><span class="comment">//                &quot;name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +</span></span><br><span class="line"><span class="comment">//                &quot;, age=&quot; + age +</span></span><br><span class="line"><span class="comment">//                &#x27;&#125;&#x27;;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Address类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hewen.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Address&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;province=&#x27;&quot;</span> + province + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, city=&#x27;&quot;</span> + city + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getProvince</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> province;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProvince</span><span class="params">(String province)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.province = province;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCity</span><span class="params">(String city)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.city = city;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><p>本文注解：</p><ul><li><strong>@RequestParam</strong>注解关联请求参数名称与形参名称之间的关系</li><li><strong>@RequestBody</strong>注解将外部传递的json数组数据映射到形参的集合对象中作为数据</li><li><strong>@EnableWebMvc</strong>开启json数据类型自动转换</li><li><strong>@DateTimeFormat</strong>注解设置日期类型数据格式</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IOC和DI</title>
      <link href="/posts/3963128748.html"/>
      <url>/posts/3963128748.html</url>
      
        <content type="html"><![CDATA[<hr><p>塑料大概需要200年降解， 人的平均寿命是76.34岁， 樱花一般在3—5月开放， 碘131的半衰期是8天， 快乐水开后要在24小时喝掉， 。。。。。。。。。。。  真是如此的规律和普通呢， 如果世界变得不普通呢？ 比如说我正躺在树下，结果掉下来的不是苹果，不是椰子，不是榴莲， 而是你在我心里～</p><hr><h1 id="一、Ioc-Inversion-of-Control-—控制反转"><a href="#一、Ioc-Inversion-of-Control-—控制反转" class="headerlink" title="一、Ioc(Inversion of Control)—控制反转"></a>一、Ioc(Inversion of Control)—控制反转</h1><p>业务层实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookDaoImpl</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据层实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如图，当我们要想将数据层实现的代码重新实现时，我们可以直接书写，但是一旦代码上线，直接更改源码的操作会带来一系列的问题，花费等多的时间和money。原因是因为代码的耦合度非常高，此时就提出了一个思想——Ioc思想，此思想的核心是创建对象时就不需要我们直接创建了，<strong>将创建对象的控制转到外部，这样就可以实现代码的解耦，这就是控制反转。</strong></p><hr><h1 id="二、Ioc的实现"><a href="#二、Ioc的实现" class="headerlink" title="二、Ioc的实现"></a>二、Ioc的实现</h1><p>通过提供Ioc容器（也叫Spring容器），Ioc实现了控制反转，用它来充当Ioc思想的外部。直接在Ioc容器中进行对象的创建和使用，<strong>Ioc容器负责对象的创建，初始化等一系列工作，被创建或被管理的对象在Ioc容器中统称为bean。</strong></p><hr><h1 id="三、DI（dependency-injection）——依赖注入"><a href="#三、DI（dependency-injection）——依赖注入" class="headerlink" title="三、DI（dependency injection）——依赖注入"></a>三、DI（dependency injection）——依赖注入</h1><h2 id="1-引入库"><a href="#1-引入库" class="headerlink" title="1.引入库"></a>1.引入库</h2><p>当在进行web开发时，service依赖dao运行，此时service和dao同时都在Ioc容器中，于是Ioc容器就把service和dao进行绑定，而绑关系的整个过程就叫依赖注入。</p><hr><h1 id="四、代码（xml的配置）"><a href="#四、代码（xml的配置）" class="headerlink" title="四、代码（xml的配置）"></a>四、代码（xml的配置）</h1><p>结构：</p><p><img src="https://images.xcnv.com/2022/11/02/636149533be19.png" alt=""></p><p>maven配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1.导入spring的坐标spring-context，对应版本是5.2.10.RELEASE--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Ioc容器负责对象的创建，初始化等一系列工作，被创建或被管理的对象在Ioc容器中统称为bean--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--2.配置bean--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--bean标签标示配置bean</span></span><br><span class="line"><span class="comment">    id属性标示给bean起名字</span></span><br><span class="line"><span class="comment">    class属性表示给bean定义类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.hewen.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    Dao放在service中，所以在bookService中修改--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.hewen.service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--7.配置server与dao的关系--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--property标签表示配置当前bean的属性</span></span><br><span class="line"><span class="comment">        name属性表示配置哪一个具体的属性</span></span><br><span class="line"><span class="comment">        ref属性表示参照哪一个bean--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookDao1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--第一个bookDao为属性的名称，ref的bookDao为11行id属性的dao--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><p>在传统的java程序设计中，A需要B，我们就要在A中new一个B，这样大大提高了代码的耦合度，而spring会把资源存储到IoC容器中，当A依赖B的时候，IoC就会把B注入到A中。这样就完成了资源的控制的反转。</p><p>　　所以控制反转IoC(Inversion of Control)是说创建对象的控制权进行转移，以前创建对象的主动权和创建时机是由自己把控的，而现在这种权力转移到第三方，比如转移交给了IoC容器，它就是一个专门用来创建对象的工厂（Ioc的设计模式就是工厂模式），你要什么对象，它就给你什么对象，有了 IoC容器，依赖关系就变了，原先的依赖关系就没了，它们都依赖IoC容器了，通过IoC容器来建立它们之间的关系。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AOP入门案例</title>
      <link href="/posts/4016151914.html"/>
      <url>/posts/4016151914.html</url>
      
        <content type="html"><![CDATA[<hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><img src="https://images.xcnv.com/2022/11/02/6361468f76985.png" alt="1"></p><hr><h1 id="一、AOP入门案例"><a href="#一、AOP入门案例" class="headerlink" title="一、AOP入门案例"></a>一、AOP入门案例</h1><p>案例简介：在执行输出语句前输出当前系统的时间戳</p><h2 id="1、AOP使用步骤"><a href="#1、AOP使用步骤" class="headerlink" title="1、AOP使用步骤"></a>1、AOP使用步骤</h2><h3 id="（1）导入AOP相关坐标"><a href="#（1）导入AOP相关坐标" class="headerlink" title="（1）导入AOP相关坐标"></a>（1）导入AOP相关坐标</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 此包也是aop开发所需要的包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>提示：导入spring-context时默认导入了aop的包，依赖关系</code></p><h3 id="（2）定义接口与实现类"><a href="#（2）定义接口与实现类" class="headerlink" title="（2）定义接口与实现类"></a>（2）定义接口与实现类</h3><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hewen.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hewen.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hewen.dao.BookDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao update ...&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="（3）定义通知类，创建通知"><a href="#（3）定义通知类，创建通知" class="headerlink" title="（3）定义通知类，创建通知"></a>（3）定义通知类，创建通知</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hewen.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（4）定义切入点"><a href="#（4）定义切入点" class="headerlink" title="（4）定义切入点"></a>（4）定义切入点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hewen.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="comment">//切入点依托一个不具有实际意义的方法，即无参数，无返回值，方法体无实际逻辑</span></span><br><span class="line">    <span class="comment">//设置(定义)切入点，要求配置在方法上方</span></span><br><span class="line">    <span class="comment">//括号里面写执行到哪个方法(切入点)的具体方法   一个返回值为void的在com.hewen.dao.BookDao接口的update方法</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(void com.hewen.dao.BookDao.update())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>切入点依托一个<strong>不具有实际意义</strong>的方法，即无参数，无返回值，方法体无实际逻辑</p><p>括号里面写执行到哪个方法(切入点)的具体方法 </p><p>设置(定义)切入点，要求配置在方法上方</p></blockquote><h3 id="（5）绑定切入点与通知的关系并添加通知具体执行位置"><a href="#（5）绑定切入点与通知的关系并添加通知具体执行位置" class="headerlink" title="（5）绑定切入点与通知的关系并添加通知具体执行位置"></a>（5）绑定切入点与通知的关系并添加通知具体执行位置</h3><p>使用@Before()注解绑定切入点与通知的关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;method2()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>前置通知：@Before 在目标业务方法执行之前执行</li><li>后置通知：@After 在目标业务方法执行之后执行</li><li>返回通知：@AfterReturning 在目标业务方法返回结果之后执行</li><li>异常通知：@AfterThrowing 在目标业务方法抛出异常之后</li><li>环绕通知：@Around 功能强大，可代替以上四种通知，还可以控制目标业务方法是否执行以及何时执行</li></ul><h3 id="（6）定义通知类受spring管理"><a href="#（6）定义通知类受spring管理" class="headerlink" title="（6）定义通知类受spring管理"></a>（6）定义通知类受spring管理</h3><blockquote><p>1.通知类前加@Component</p><p>2.通知类@Aspect</p></blockquote><p>@Aspect设置当前类为切面类类，告诉spring当扫描到这个时把它当AOP处理，不然读到这个bean就会当成普通的bean处理</p><h3 id="（7）开启spring对通知类的管理"><a href="#（7）开启spring对通知类的管理" class="headerlink" title="（7）开启spring对通知类的管理"></a>（7）开启spring对通知类的管理</h3><blockquote><p>配置类(SpringConfig)前@EnableAspectJAutoProxy </p></blockquote><p>@EnableAspectJAutoProxy 告诉spring这里有用注解开发的AOP</p><p>完整代码：<br>MyAdvice类（通知类）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hewen.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="comment">//通知类必须配置成Spring管理的bean</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">/*设置当前类为切面类类*/</span></span><br><span class="line"><span class="meta">@Aspect</span>   <span class="comment">//此注释是告诉spring当扫描到这个时把它当AOP处理，不然读到这个bean就会当成普通的bean处理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="comment">//切入点依托一个不具有实际意义的方法，即无参数，无返回值，方法体无实际逻辑</span></span><br><span class="line">    <span class="comment">//设置(定义)切入点，要求配置在方法上方</span></span><br><span class="line">    <span class="comment">//括号里面写执行到哪个方法(切入点)的具体方法   一个返回值为void的在com.hewen.dao.BookDao接口的update方法</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(void com.hewen.dao.BookDao.update())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置在切入点pt()的前面运行当前操作（前置通知）</span></span><br><span class="line">    <span class="meta">@Before(&quot;method2()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>spring配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hewen.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.EnableAspectJAutoProxy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.hewen&quot;)</span></span><br><span class="line"><span class="comment">//开启注解开发AOP功能</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span>  <span class="comment">//告诉spring这里有用注解开发的AOP</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、AOP工作流程"><a href="#二、AOP工作流程" class="headerlink" title="二、AOP工作流程"></a>二、AOP工作流程</h1><p>此节需要知道动态代理，可看此篇文章  [java代理模式]</p><p><img src="https://images.xcnv.com/2022/11/02/6361469b92823.png" alt=""></p><h1 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h1><p>使用注解：</p><ul><li>@Pointcut()</li><li>@Before()</li><li>@Component</li><li><p>@Aspect</p><p><img src="https://images.xcnv.com/2022/11/02/636146a839ee3.png" alt=""></p><p><img src="https://images.xcnv.com/2022/11/02/636146b390c71.png" alt=""></p></li></ul><h2 id="AOP总结"><a href="#AOP总结" class="headerlink" title="AOP总结"></a>AOP总结</h2><p><img src="https://images.xcnv.com/2022/11/02/636146b763013.png" alt=""></p><p><img src="https://images.xcnv.com/2022/11/02/636146bc28395.png" alt=""></p><p><img src="https://images.xcnv.com/2022/11/02/636146c224dec.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AOP </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC入门案例</title>
      <link href="/posts/326684684.html"/>
      <url>/posts/326684684.html</url>
      
        <content type="html"><![CDATA[<hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr><h1 id="一、SpringMVC简介"><a href="#一、SpringMVC简介" class="headerlink" title="一、SpringMVC简介"></a>一、SpringMVC简介</h1><p><img src="https://images.xcnv.com/2022/08/26/630839c6d3391.gif" alt=""></p><h2 id="1-MVC设计模式"><a href="#1-MVC设计模式" class="headerlink" title="1.MVC设计模式"></a>1.MVC设计模式</h2><p>经典MVC模式中，M是指业务模型，V是指用户界面，C则是控制器，使用MVC的目的是将M和V的实现代码分离，从而使同一个程序可以使用不同的表现形式。</p><p><img src="https://images.xcnv.com/2022/11/02/636148c1b87bd.jpg" alt=""></p><blockquote><p>M：<br>数据模型，提供要展示的数据，因此包含数据和行为，可以认为是领域模型或JavaBean组件（包含数据和行为），不过现在一般都分离开来：Value Object（数据Dao） 和 服务层（行为Service）。也就是该模型提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务。</p><p>V：<br>负责进行模型的展示，一般就是我们见到的用户界面，客户想看到的东西。</p><p>C：<br>接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责展示。</p></blockquote><h2 id="2-SpringMVC"><a href="#2-SpringMVC" class="headerlink" title="2.SpringMVC"></a>2.SpringMVC</h2><p><img src="https://images.xcnv.com/2022/11/02/636148d1dfad3.jpg" alt=""></p><p>SpringMVC是属于Spring的一部分，如上图所示。<br>SpringMVC是一种基于Java，实现了Web MVC设计模式，请求驱动类型的轻量级Web框架，即使用了MVC架构模式的思想，将Web层进行职责解耦。基于请求驱动指的就是使用请求-响应模型，框架的目的就是帮助我们简化开发，SpringMVC也是要简化我们日常Web开发。</p><h3 id="1-SpringMVC核心架构图"><a href="#1-SpringMVC核心架构图" class="headerlink" title="1.SpringMVC核心架构图"></a>1.SpringMVC核心架构图</h3><p><img src="https://images.xcnv.com/2022/11/02/636148e2449e6.jpg" alt=""></p><h3 id="2-SpringMVC五大组件"><a href="#2-SpringMVC五大组件" class="headerlink" title="2.SpringMVC五大组件"></a>2.SpringMVC五大组件</h3><blockquote><p><strong>DispatcherServlet</strong><br>DispatcherServlet是前置控制器，配置在web.xml文件中的。拦截匹配的请求，Servlet拦截匹配规则要自己定义，把拦截下来的请求，依据相应的规则分发到目标Controller来处理，是配置spring MVC的第一步。</p><p>DispatcherServlet是前端控制器设计模式的实现，提供Spring Web MVC的集中访问点，而且负责职责的分派，而且与Spring IoC容器无缝集成，从而可以获得Spring的所有好处。</p><p><strong>HandlerMapping</strong><br>HandlerMapping 是处理器映射，它的作用是请求派发，负责请求和控制器建立对应的关系。它是由 DispatcherServlet 调用，DispatcherServlet 会从容器中取出所有 HandlerMapping 实例并遍历，让 HandlerMapping 实例根据自己实现类的方式去尝试查找 Handler。也就是说，DispatcherServlet要将一个请求交给哪个特定的Controller，它需要咨询一个Bean，这个Bean的名字为“HandlerMapping”。</p><p><strong>Controller</strong><br>控制器，负责处理由DispatcherServlet 分发的请求，它把用户请求的数据经过业务处理层处理之后封装成一个Model ，然后再把该Model 返回给对应的View 进行展示。</p><p><strong>ModelAndView</strong><br>封装数据信息和视图信息的模型。使用ModelAndView类用来存储处理完后的结果数据，以及显示该数据的视图。从名字上看ModelAndView中的Model代表模型，View代表视图，这个名字就很好地解释了该类的作用。业务处理器调用模型层处理完用户请求后，把结果数据存储在该类的model属性中，把要返回的视图信息存储在该类的view属性中，然后让该ModelAndView返回该Spring MVC框架。框架通过调用配置文件中定义的视图解析器，对该对象进行解析，最后把结果数据显示在指定的页面上。</p><p><strong>ViewResolver</strong><br>视图解析器，ViewResolver 的主要作用是把一个逻辑上的视图名称解析为一个真正的视图。</p></blockquote><h3 id="3-SpringMVC优缺点"><a href="#3-SpringMVC优缺点" class="headerlink" title="3.SpringMVC优缺点"></a>3.SpringMVC优缺点</h3><p>优点：</p><ul><li>灵活性强，Spring MVC的框架易扩展</li><li>有利于开发中的分工，提高开发效率</li><li>组件重用，有利于代码复用，重用性高</li></ul><p>缺点：</p><ul><li>不适合小型，中等规模的应用程序</li><li>增加系统结构和实现的复杂性</li></ul><h1 id="二、使用步骤"><a href="#二、使用步骤" class="headerlink" title="二、使用步骤"></a>二、使用步骤</h1><h2 id="1-导入SpringMVC和Servlet坐标"><a href="#1-导入SpringMVC和Servlet坐标" class="headerlink" title="1.导入SpringMVC和Servlet坐标"></a>1.导入SpringMVC和Servlet坐标</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-创建SpringMVC控制类"><a href="#2-创建SpringMVC控制类" class="headerlink" title="2.创建SpringMVC控制类"></a>2.创建SpringMVC控制类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hewen.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义表现层控制器bean</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置映射路径为/save，即外部访问路径</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="comment">//设置当前操作返回结果为指定json数据（本质上是一个字符串信息）</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user save ...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;info&#x27;:&#x27;springmvc&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置映射路径为/delete，即外部访问路径</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/delete&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user delete ...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;info&#x27;:&#x27;springmvc&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户发哪个请求可以调用这个方法呢，就需要用 <strong>@RequestMapping()</strong> 注解。由于返回的是为String类型的json数据，所以还需要 <strong>@ResponseBody</strong>置当前操作返回结果为指定json数据</p><h2 id="3-初始化SpringMVC环境，加载bean"><a href="#3-初始化SpringMVC环境，加载bean" class="headerlink" title="3.初始化SpringMVC环境，加载bean"></a>3.初始化SpringMVC环境，加载bean</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hewen.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">//springmvc配置类，本质上还是一个spring配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.hewen.controller&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-初始化Servlet容器，加载SpringMVC环境，并设置技术处理请求"><a href="#4-初始化Servlet容器，加载SpringMVC环境，并设置技术处理请求" class="headerlink" title="4.初始化Servlet容器，加载SpringMVC环境，并设置技术处理请求"></a>4.初始化Servlet容器，加载SpringMVC环境，并设置技术处理请求</h2><p>为了启动服务器可以加载SpringMvcConfig，需要定义一个Servlet容器启动的配置类。继承<br>AbstractDispatcherServletInitializer并覆盖里面的三个方法。</p><blockquote><p>createServletApplicationContext()<br>加载SpringMVC配置类</p><p>getServletMappings()<br>设置springmvc控制器处理的请求映射路径</p><p>createRootApplicationContext()<br>加载spring配置类</p></blockquote><h2 id=""><a href="#" class="headerlink" title=""></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hewen.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.support.AnnotationConfigWebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.support.AbstractDispatcherServletInitializer;</span><br><span class="line"></span><br><span class="line"><span class="comment">//web容器配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainersInitConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractDispatcherServletInitializer</span> &#123;</span><br><span class="line">    <span class="comment">//加载springmvc配置类，产生springmvc容器（本质还是spring容器）</span></span><br><span class="line">    <span class="keyword">protected</span> WebApplicationContext <span class="title function_">createServletApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//初始化WebApplicationContext对象</span></span><br><span class="line">        <span class="type">AnnotationConfigWebApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigWebApplicationContext</span>();</span><br><span class="line">        <span class="comment">//加载指定配置类</span></span><br><span class="line">        ctx.register(SpringMvcConfig.class);</span><br><span class="line">        <span class="keyword">return</span> ctx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置由springmvc控制器处理的请求映射路径</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加载spring配置类</span></span><br><span class="line">    <span class="keyword">protected</span> WebApplicationContext <span class="title function_">createRootApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></h2><p><img src="https://images.xcnv.com/2022/11/02/636148f17e03e.jpg" alt=""></p><p>通过查看AbstractDispatcherServletInitializer的结构可以看到它有一个子类<strong>AbstractAnnotationConfigDispatcherServletInitializer</strong>，通过继承它就可以使配置变得简单。</p><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hewen.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;</span><br><span class="line"></span><br><span class="line"><span class="comment">//web配置类简化开发，仅设置配置类类名即可</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainersInitConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringMvcConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></h2><h1 id="三、运行"><a href="#三、运行" class="headerlink" title="三、运行"></a>三、运行</h1><p>启动Tomcat运行结果如下</p><p><img src="https://images.xcnv.com/2022/11/02/636149061eabd.jpg" alt=""></p><h1 id="四、工作流程"><a href="#四、工作流程" class="headerlink" title="四、工作流程"></a>四、工作流程</h1><blockquote><p>启动服务器初始化过程</p></blockquote><p> 1.服务器启动，执行ServletContainersInitConfig类，初始化web容器</p><p> 2.执行createServletApplicationContext方法，创建WebApplicationContext对象</p><p> 3.加载SpringMvcConfig</p><p> 4.执行@componentScan加载对应的bean</p><p> 5.加载UserController，每个@RequestMapping的名称对应一个具体的方法</p><p> 6.执行getServletMappings方法，定义所以的请求都通过SpringMVC</p><hr><blockquote><p>单次请求过程</p></blockquote><p> 1.发送请求locahost:8080/save</p><p> 2.web容器发现所有请求都经过SpringMVC，将请求交给SpringMVC处理</p><p> 3.解析请求路径/save</p><p> 4.由/save匹配执行对应的方法save()</p><p> 5.执行save()</p><p> 6.检测到有@ResponseBody直接将save()方法返回值作为响应请求体返回给请求方</p><hr><h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><blockquote><p>@Controller</p></blockquote><ul><li><p>类型：类注解</p></li><li><p>位置：SpringMVC控制器类定义上方</p></li><li><p>作用： 设定SpringMVC的核心控制器bean</p></li></ul><blockquote><p>@RequestMapping</p></blockquote><ul><li><p>类型：方法注解</p></li><li><p>位置：SpringMVC控制器类定义上方</p></li><li><p>作用：设置当前控制器方法请求访问路径</p></li></ul><blockquote><p>@ResponseBody</p></blockquote><ul><li><p>类型：方法注解</p></li><li><p>位置：SpringMVC控制器类定义上方</p></li><li><p>作用：设置当前控制器方法响应内容为当前返回值，无需解析</p></li></ul><p><a href="https://blog.csdn.net/weixin_53601359/article/details/114460179">参考文章1</a><br><a href="https://blog.csdn.net/litianxiang_kaola/article/details/79169148">参考文章2</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>键盘行</title>
      <link href="/posts/3980527341.html"/>
      <url>/posts/3980527341.html</url>
      
        <content type="html"><![CDATA[<hr><p>月光淡淡，笼罩着村外的松林。</p><p>白云团团，漏出了几点疏星。</p><p>天河何处？远远的海雾模糊。</p><p>怕是有鲛人在岸，对月流珠？</p><hr><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode.cn/problems/keyboard-row/">原题链接</a></p><p><img src="https://images.xcnv.com/2022/11/02/63614a3c6089d.png" alt=""></p><h1 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h1><h2 id="思路一（无脑）"><a href="#思路一（无脑）" class="headerlink" title="思路一（无脑）"></a>思路一（无脑）</h2><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>首先给出每行的所有字母的字符串，包括大小写（我没有使用大小写转换）。然后使用<strong>增强for循环</strong>遍历words里面的单词，判断出单词的第一个字母属于哪一行，然后将那个单词转化为字符串数组和那一行进行比较，是则加入list数组，最后转为字符串数组。</p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String[] findWords(String[] words) &#123;</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;qwertyuiopQWERTYUIOP&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;asdfghjklASDFGHJKL&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="string">&quot;zxcvbnmZXCVBNM&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">//.charAt(0)  返回字符串索引处的字符，返回类型为char</span></span><br><span class="line">        <span class="comment">//String.valueOf()  将char转化为String</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">first</span> <span class="operator">=</span> String.valueOf(word.charAt(<span class="number">0</span>));</span><br><span class="line">        <span class="comment">//.contains()  比较内容是不是一样的，是则返回ture，不是比较地址</span></span><br><span class="line">        <span class="keyword">if</span> (str1.contains(first))&#123;</span><br><span class="line">            str = str1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (str2.contains(first))&#123;</span><br><span class="line">            str = str2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (str3.contains(first))&#123;</span><br><span class="line">            str = str3;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//字符串转换到一个新的字符数组</span></span><br><span class="line">        <span class="type">char</span>[] chars = word.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> aChar : chars) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!str.contains(String.valueOf(aChar))) &#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="comment">//跳出for循环</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">            list.add(word);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="comment">//以正确的顺序(从第一个到最后一个元素)返回一个包含此列表中所有元素的数组。这充当了基于数组的API和基于集合的API之间的桥梁。</span></span><br><span class="line">        <span class="comment">//toArray(T[] a)方法接收T类型的数组, 返回一个T类型的数组</span></span><br><span class="line">    <span class="keyword">return</span> list.toArray(<span class="keyword">new</span> <span class="title class_">String</span> [<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="时间和空间复杂度"><a href="#时间和空间复杂度" class="headerlink" title="时间和空间复杂度"></a>时间和空间复杂度</h3><h2 id="思路二（哈希）"><a href="#思路二（哈希）" class="headerlink" title="思路二（哈希）"></a>思路二（哈希）</h2><h3 id="思路分析-1"><a href="#思路分析-1" class="headerlink" title="思路分析"></a>思路分析</h3><p><a href="https://leetcode.cn/problems/keyboard-row/solution/java-100-ha-xi-by-siguo-2/">原题解链接</a></p><blockquote><p>java :<br>有关这种26个字符的，通常有两种可以解决：1、new HashMap&lt;&gt; 2、new int[]<br>这里为了避免频繁调用map.put()，这里仅展示数组实现的哈希表，下标就代表字符，数组里的值代表行数</p><p>C++ :<br>1.将所有的字母对应行数赋值<br>2.遍历所有字符串，判断每个字符串的各个字符是否存在于同一行</p></blockquote><h3 id="java源码"><a href="#java源码" class="headerlink" title="java源码"></a>java源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String[] findWords(String[] words) &#123;</span><br><span class="line">        <span class="type">int</span>[] map = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(String word : words)&#123;</span><br><span class="line">            <span class="keyword">if</span>(helper(word, map))</span><br><span class="line">                list.add(word);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[list.size()]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">helper</span><span class="params">(String string, <span class="type">int</span>[] map)</span>&#123;    <span class="comment">//判断某个字符是否在同一行</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> string.toLowerCase();</span><br><span class="line">        <span class="type">int</span> <span class="variable">flag</span> <span class="operator">=</span> map[str.charAt(<span class="number">0</span>) - <span class="string">&#x27;a&#x27;</span>];        <span class="comment">//首个字母所在行号</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; str.length(); i++)&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> str.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(map[ch - <span class="string">&#x27;a&#x27;</span>] != flag)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">作者：siguo</span><br><span class="line">链接：https:<span class="comment">//leetcode.cn/problems/keyboard-row/solution/java-100-ha-xi-by-siguo-2/</span></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><h3 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">findWords</span><span class="params">(vector&lt;string&gt;&amp; words)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        vector&lt;string&gt; result;   <span class="comment">//定义vector&lt;string&gt;变量result保存结果</span></span><br><span class="line">        string hash_map = <span class="string">&quot;23321222122233111121131313&quot;</span>;<span class="comment">//定义string 变量hash_map保存所有字母对应的行数</span></span><br><span class="line">        <span class="type">char</span> current_sign = <span class="string">&#x27;0&#x27;</span>; <span class="comment">//定义char变量current_sign保存每个字符串第一个字符所在行数,零为初始值</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (string i : words)&#123;   <span class="comment">//遍历每个字符串</span></span><br><span class="line"></span><br><span class="line">            current_sign = hash_map[(i[<span class="number">0</span>] &gt;= <span class="string">&#x27;a&#x27;</span> ? i[<span class="number">0</span>] : i[<span class="number">0</span>] + <span class="number">32</span>) - <span class="string">&#x27;a&#x27;</span>];<span class="comment">//取出字符串第一个字符所在的行数</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span> k : i)&#123;     <span class="comment">//遍历字符串的各个字符</span></span><br><span class="line">                <span class="keyword">if</span> (hash_map[(k &gt;= <span class="string">&#x27;a&#x27;</span> ? k : k + <span class="number">32</span>) - <span class="string">&#x27;a&#x27;</span>] == current_sign) &#123;<span class="keyword">continue</span>;&#125;<span class="comment">//判断各个字符是否都在同一行，是则继续循环遍历</span></span><br><span class="line">                <span class="keyword">else</span> &#123;current_sign = <span class="string">&#x27;0&#x27;</span>; <span class="keyword">break</span>;&#125;<span class="comment">//存在字符不在同一行，结束当前字符串遍历，字符串已不合法，current_sign归零</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (current_sign != <span class="string">&#x27;0&#x27;</span>) &#123;result.<span class="built_in">push_back</span>(i);&#125;<span class="comment">//若各个字符都在同一行，当前字符串合法，保存进结果</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result;       <span class="comment">//返回结果</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">作者：yi-si-cb</span><br><span class="line">链接：https:<span class="comment">//leetcode.cn/problems/keyboard-row/solution/xie-shi-cbao-li-fa-0mszhi-xing-by-yi-si-ommud/</span></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><h3 id="时间和空间复杂度-1"><a href="#时间和空间复杂度-1" class="headerlink" title="时间和空间复杂度"></a>时间和空间复杂度</h3><h1 id="所用API"><a href="#所用API" class="headerlink" title="所用API"></a>所用API</h1><ul><li>.charAt(0) 返回字符串索引处的字符，返回类型为char</li><li>String.valueOf()  将char转化为String</li><li>.contains()  比较内容是不是一样的，是则返回ture，不是比较地址</li><li>list.toArray(new String [0])  以正确的顺序(从第一个到最后一个元素)返回一个包含此列表中所有元素的数组。这充当了基于数组的API和基于集合的API之间的桥梁。<pre><code> toArray(T[] a)方法接收T类型的数组, 返回一个T类型的数组 [list.toArray(new String [0]) 详解](https://blog.csdn.net/littlehaes/article/details/105553431)</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMP算法</title>
      <link href="/posts/765481613.html"/>
      <url>/posts/765481613.html</url>
      
        <content type="html"><![CDATA[<hr><p>我大抵是病了，横竖都睡不着，坐起身来点起了一支烟，这悲伤没有由来，黯然看着床头的两个枕头，一个是我的，另一个也是我的。<br>窗外的人们总执着于寻找另一半，而我向来是不屑于此的，可每每见到行人成双结对时，我的心仍旧燃起一丝希冀，也罢，大抵是秋天到了吧。<br>我大抵是孤身一人太久了，竟希望有个伴来。<br>我做文章时，她在一旁翻阅我曾写的文字；我不做文章时，就拉着她的手，端详她温柔的眉眼<br>未曾饮酒，竟生出几分醉意来<br>大抵是到了该寻一个姑娘的年纪了，近来夜里冷的厉害，特别是心里，凉的出奇，两床被子面对这寒冬的挑衅，也显得有些许吃力了，或许只有心仪姑娘的照料，才能让我感到温暖罢了<br>我走在路上，一共4个人，一对是情侣，另一对是我和影子。</p><hr><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode-cn.com/problems/implement-strstr/">原题连接</a></p><p><img src="https://images.xcnv.com/2022/11/02/63614a924d42b.png" alt=""></p><!-- ![](https://img-blog.csdnimg.cn/f055af0c78484bd7a961fb85c89816d9.png#pic_center) --><h1 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h1><h2 id="思路一（API）"><a href="#思路一（API）" class="headerlink" title="思路一（API）"></a>思路一（API）</h2><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">strStr</span><span class="params">(String haystack, String needle)</span> &#123;</span><br><span class="line">             <span class="keyword">return</span> haystack.indexOf(needle);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="时间和空间复杂度"><a href="#时间和空间复杂度" class="headerlink" title="时间和空间复杂度"></a>时间和空间复杂度</h3><h2 id="思路二-KMP算法"><a href="#思路二-KMP算法" class="headerlink" title="思路二(KMP算法)"></a>思路二(KMP算法)</h2><h3 id="思路分析-1"><a href="#思路分析-1" class="headerlink" title="思路分析"></a>思路分析</h3><h3 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">strStr</span><span class="params">(String haystack, String needle)</span> &#123;</span><br><span class="line">        <span class="type">int</span> m=haystack.length(),n=needle.length();</span><br><span class="line">        <span class="type">int</span>[] next=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        getNext(next,needle);</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;m&amp;&amp;j&lt;n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(j==-<span class="number">1</span>||haystack.charAt(i)==needle.charAt(j))&#123;</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                j=next[j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j&gt;=n)&#123;</span><br><span class="line">                <span class="keyword">return</span> i-n;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getNext</span><span class="params">(<span class="type">int</span>[]next,String needle)</span>&#123;</span><br><span class="line">        <span class="type">int</span> j=<span class="number">0</span>,k=-<span class="number">1</span>,n=needle.length();</span><br><span class="line">        next[<span class="number">0</span>]=-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(j&lt;n-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(k==-<span class="number">1</span>||needle.charAt(j)==needle.charAt(k))&#123;</span><br><span class="line">                j++;</span><br><span class="line">                k++;</span><br><span class="line">                next[j]=k;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                k=next[k];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="所用API"><a href="#所用API" class="headerlink" title="所用API"></a>所用API</h1><p> indexOf(String str): 返回指定字符str在字符串中（方法调用者）第一次出现的起始索引，如果此字符串中没有这样的字符，则返回 -1</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaStream流</title>
      <link href="/posts/2425679838.html"/>
      <url>/posts/2425679838.html</url>
      
        <content type="html"><![CDATA[<hr><p>“本手、妙手、俗手”是围棋的三个术语。<br> 本手是指合乎棋理的正规下法；<br> 妙手是指出人意料的精妙下法；<br> 俗手是指貌似合理，但从全局看通常会受损的下法。<br>但即便是如此精通棋术的我，看到你时，我就好像迷失了方向，感觉我的棋盘发生了天翻地覆的变化，变得难以捉摸，无从下手。<br>这一手棋…该怎么下，该如何下呢。<br>当我用了一个通宵的时间来想是什么原因的时候，我看着我自己这身经百战的双手，又想起你·那迷人的眼睛，终于想明白为什么了。<br>在遇见你的那天，我便有了那怦然心动的感觉。<br>原来“本手、妙手、俗手”这三个以外还有一种。<br>就是——你，我想牵起你的手</p><hr><h1 id="一、什么是Stream流"><a href="#一、什么是Stream流" class="headerlink" title="一、什么是Stream流"></a>一、什么是Stream流</h1><p>用于简化集合和数组操作的API。</p><h1 id="二、Stream流的思想和使用步骤"><a href="#二、Stream流的思想和使用步骤" class="headerlink" title="二、Stream流的思想和使用步骤"></a>二、Stream流的思想和使用步骤</h1><p>1.先得到集合或者数组的Stream流（就是一根传送带）。<br>2.把元素放上去。<br>3.然后就用这个Stream流简化的API来方便的操作元素。</p><h1 id="三、Stream流的好处，和普通写法进行对比"><a href="#三、Stream流的好处，和普通写法进行对比" class="headerlink" title="三、Stream流的好处，和普通写法进行对比"></a>三、Stream流的好处，和普通写法进行对比</h1><blockquote><p>代码如下（示例）：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初步认识Stream流的好处，和普通写法进行对比</span></span><br><span class="line"><span class="comment">//需求：将名字中姓张的取出，再取出只有3个字的</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stream_test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//普通写法</span></span><br><span class="line">        List&lt;String&gt; names = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.addAll(names,<span class="string">&quot;张三丰&quot;</span>,<span class="string">&quot;张无极&quot;</span>,<span class="string">&quot;效率&quot;</span>,<span class="string">&quot;张力&quot;</span>,<span class="string">&quot;函数&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; zhang = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//创建集合放姓张的名字</span></span><br><span class="line">        <span class="keyword">for</span> (String zh:names)&#123;</span><br><span class="line">            <span class="keyword">if</span> (zh.startsWith(<span class="string">&quot;张&quot;</span>))&#123; <span class="comment">//  startsWith()判断字符串以什么开头，是返回true</span></span><br><span class="line">                zhang.add(zh);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; z = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//将3个子的姓张的集合</span></span><br><span class="line">        <span class="keyword">for</span> (String zs:zhang)&#123;</span><br><span class="line">            <span class="keyword">if</span> (zs.length()==<span class="number">3</span>)&#123;</span><br><span class="line">                z.add(zs);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(z);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Stream流写法</span></span><br><span class="line">        names.stream().filter(s -&gt; s.startsWith(<span class="string">&quot;张&quot;</span>)).filter(s -&gt; s.length()==<span class="number">3</span>).forEach(s -&gt; System.out.println(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、Stream流的获取"><a href="#四、Stream流的获取" class="headerlink" title="四、Stream流的获取"></a>四、Stream流的获取</h1><blockquote><p>•集合获取Stream的方式是通过调用stream()方法实现</p></blockquote><p>代码如下（示例）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> Stream流的三类方法:</span></span><br><span class="line"><span class="comment"> 1.获取Stream流</span></span><br><span class="line"><span class="comment"> 2.中间方法</span></span><br><span class="line"><span class="comment"> 3.终结方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">get_Stream</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**-----------------------Collection集合获取Stream流-----------------------*/</span></span><br><span class="line">        Collection&lt;String&gt; s = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Stream&lt;String&gt; st = s.stream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**----------------------Map集合获取Stream流-------------------------------*/</span></span><br><span class="line">        Map&lt;String,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//键流</span></span><br><span class="line">        Stream&lt;String&gt; keyStream = map.keySet().stream();</span><br><span class="line">        <span class="comment">//值流</span></span><br><span class="line">        Stream&lt;Integer&gt; valueStream = map.values().stream();</span><br><span class="line">        <span class="comment">//键值流</span></span><br><span class="line">        Stream&lt;Map.Entry&lt;String, Integer&gt;&gt; stream = map.entrySet().stream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**--------------------数组获取Stream流------------------------------------*/</span></span><br><span class="line">        String[] sc = &#123;<span class="string">&quot;是&quot;</span>,<span class="string">&quot;看&quot;</span>,<span class="string">&quot;加法&quot;</span>,<span class="string">&quot;火车&quot;</span>&#125;;</span><br><span class="line">        <span class="comment">//方法一</span></span><br><span class="line">        Stream&lt;String&gt; cv = Arrays.stream(sc);</span><br><span class="line">        <span class="comment">//方法二</span></span><br><span class="line">        Stream&lt;String&gt; cv2 = Stream.of(sc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五、Stream流常用API"><a href="#五、Stream流常用API" class="headerlink" title="五、Stream流常用API"></a>五、Stream流常用API</h1><p>中间操作方法 (非终结方法，调用完成后返回新的Stream流可以继续使用，支持链式编程)：   </p><ul><li>filter : 过滤元素    — Stream<T> filter(Predicate&lt;? super T&gt; predicate)</li><li>limit : 取前几个元素</li><li>skip : 跳过前几个</li><li>map : 加工方法</li><li>concat : 合并流。<br>终结操作方法 (调用完成后流就无法继续使用了)：</li><li>void forEach​(Consumer action)   对此流的每个元素执行遍历操作</li><li>long count​()   返回此流中的元素数<br>代码如下：<br>Student类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>API:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *          forEach : 逐一处理(遍历)</span></span><br><span class="line"><span class="comment"> *          count：统计个数</span></span><br><span class="line"><span class="comment"> *             -- long count();</span></span><br><span class="line"><span class="comment"> *          filter : 过滤元素</span></span><br><span class="line"><span class="comment"> *             -- Stream&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate)</span></span><br><span class="line"><span class="comment"> *          limit : 取前几个元素</span></span><br><span class="line"><span class="comment"> *          skip : 跳过前几个</span></span><br><span class="line"><span class="comment"> *          map : 加工方法</span></span><br><span class="line"><span class="comment"> *          concat : 合并流。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//Stream_API(中间操作方法)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stream_API_Student</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;张卡车&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;周新华&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;赵敏&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张可&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张思米&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Stream&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate)</span></span><br><span class="line">        list.stream().filter(s -&gt; s.startsWith(<span class="string">&quot;张&quot;</span>)).forEach(s -&gt; System.out.println(s));</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">size</span> <span class="operator">=</span> list.stream().filter(s -&gt; s.length() == <span class="number">3</span>).count();</span><br><span class="line">        System.out.println(size);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// list.stream().filter(s -&gt; s.startsWith(&quot;张&quot;)).limit(2).forEach(s -&gt; System.out.println(s));</span></span><br><span class="line">        list.stream().filter(s -&gt; s.startsWith(<span class="string">&quot;张&quot;</span>)).limit(<span class="number">2</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        list.stream().filter(s -&gt; s.startsWith(<span class="string">&quot;张&quot;</span>)).skip(<span class="number">2</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// map加工方法: 第一个参数原材料  -&gt; 第二个参数是加工后的结果。</span></span><br><span class="line">        <span class="comment">// 给集合元素的前面都加上一个：报导：</span></span><br><span class="line">        list.stream().map(s -&gt; <span class="string">&quot;报导：&quot;</span> + s).forEach(a -&gt; System.out.println(a));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 需求：把所有的名称 都加工成一个学生对象。</span></span><br><span class="line">        list.stream().map(s -&gt; <span class="keyword">new</span> <span class="title class_">Student</span>(s)).forEach(s -&gt; System.out.println(s));</span><br><span class="line"><span class="comment">//        list.stream().map(Student::new).forEach(System.out::println); // 构造器引用  方法引用</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 合并流。</span></span><br><span class="line">        Stream&lt;String&gt; s1 = list.stream().filter(s -&gt; s.startsWith(<span class="string">&quot;张&quot;</span>));</span><br><span class="line">        Stream&lt;String&gt; s2 = Stream.of(<span class="string">&quot;java1&quot;</span>, <span class="string">&quot;java2&quot;</span>);</span><br><span class="line">        <span class="comment">// public static &lt;T&gt; Stream&lt;T&gt; concat(Stream&lt;? extends T&gt; a, Stream&lt;? extends T&gt; b)</span></span><br><span class="line">        Stream&lt;String&gt; s3 = Stream.concat(s1 , s2);</span><br><span class="line">        s3.distinct().forEach(s -&gt; System.out.println(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="六、收集Stream流"><a href="#六、收集Stream流" class="headerlink" title="六、收集Stream流"></a>六、收集Stream流</h1><blockquote><p>收集Stream流：<br>就是把Stream流操作后的结果数据转回到集合或者数组中去。</p></blockquote></li></ul><blockquote><p>Stream流的收集方法：<br> R collect(Collector collector) 开始收集Stream流，指定收集器</p><p>Collectors工具类提供了具体的收集方式:<br> public static <T> Collector toList()   把元素收集到List集合中<br> public static <T> Collector toSet()    把元素收集到Set集合中<br> public static  Collector toMap(Function keyMapper , Function valueMapper)  把元素收集到Map集合中</p></blockquote><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> 收集Stream流的含义：就是把Stream流操作后的结果数据转回到集合或者数组中去。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Stream流的收集方法：</span></span><br><span class="line"><span class="comment"> R collect(Collector collector) 开始收集Stream流，指定收集器</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Collectors工具类提供了具体的收集方式:</span></span><br><span class="line"><span class="comment"> public static &lt;T&gt; Collector toList()   把元素收集到List集合中</span></span><br><span class="line"><span class="comment"> public static &lt;T&gt; Collector toSet()    把元素收集到Set集合中</span></span><br><span class="line"><span class="comment"> public static  Collector toMap(Function keyMapper , Function valueMapper)  把元素收集到Map集合中</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stream_collect</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;张卡车&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;周新华&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;赵敏&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张可&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张思米&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        Stream&lt;String&gt; z =list.stream().filter(s-&gt;s.startsWith(<span class="string">&quot;张&quot;</span>));</span><br><span class="line">        List&lt;String&gt; z1 = z.collect(Collectors.toList());</span><br><span class="line">        System.out.println(z1);</span><br><span class="line"><span class="comment">//        Set&lt;String&gt; z2 = z.collect(Collectors.toSet());</span></span><br><span class="line"><span class="comment">//        System.out.println(z2);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//放入数组</span></span><br><span class="line">        Stream&lt;String&gt; k =list.stream().filter(s-&gt;s.startsWith(<span class="string">&quot;张&quot;</span>));</span><br><span class="line">        Object[] k1 = k.toArray();</span><br><span class="line">        System.out.println(Arrays.toString(k1));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h1><p>Employee类<br>下面展示一些 <code>内联代码片</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">char</span> sex;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> monry;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> salary;</span><br><span class="line">    <span class="keyword">private</span> String zuo;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String name, <span class="type">char</span> sex, <span class="type">int</span> monry, <span class="type">int</span> salary, String zuo)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">        <span class="built_in">this</span>.monry = monry;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">        <span class="built_in">this</span>.zuo = zuo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(<span class="type">char</span> sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMonry</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> monry;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMonry</span><span class="params">(<span class="type">int</span> monry)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.monry = monry;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(<span class="type">int</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getZuo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> zuo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setZuo</span><span class="params">(String zuo)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.zuo = zuo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Employee&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, sex=&quot;</span> + sex +</span><br><span class="line">                <span class="string">&quot;, monry=&quot;</span> + monry +</span><br><span class="line">                <span class="string">&quot;, salary=&quot;</span> + salary +</span><br><span class="line">                <span class="string">&quot;, zuo=&#x27;&quot;</span> + zuo + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>toppeople类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">toppeople</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">char</span> sex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">toppeople</span><span class="params">(String name, <span class="type">char</span> sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">setName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">getName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> <span class="title function_">setSex</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getSex</span><span class="params">(<span class="type">char</span> sex)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.sex=sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;toppeople&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, sex=&quot;</span> + sex +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>test类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stream_example_toppeople_Employyee</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> sum;<span class="comment">//定义全局变量，具体用法见36行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Employee&gt; one = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        one.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;猪八戒&quot;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">30000</span> , <span class="number">25000</span>, <span class="literal">null</span>));</span><br><span class="line">        one.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;孙悟空&quot;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">25000</span> , <span class="number">1000</span>, <span class="string">&quot;顶撞上司&quot;</span>));</span><br><span class="line">        one.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;沙僧&quot;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">20000</span> , <span class="number">20000</span>, <span class="literal">null</span>));</span><br><span class="line">        one.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;小白龙&quot;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">20000</span> , <span class="number">25000</span>, <span class="literal">null</span>));</span><br><span class="line"></span><br><span class="line">        List&lt;Employee&gt; two = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        two.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;武松&quot;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">15000</span> , <span class="number">9000</span>, <span class="literal">null</span>));</span><br><span class="line">        two.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;李逵&quot;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">20000</span> , <span class="number">10000</span>, <span class="literal">null</span>));</span><br><span class="line">        two.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;西门庆&quot;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">50000</span> , <span class="number">100000</span>, <span class="string">&quot;被打&quot;</span>));</span><br><span class="line">        two.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;潘金莲&quot;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">3500</span> , <span class="number">1000</span>, <span class="string">&quot;被打&quot;</span>));</span><br><span class="line">        two.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;武大郎&quot;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">20000</span> , <span class="number">0</span>, <span class="string">&quot;下毒&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取出monry+salary最高的员工</span></span><br><span class="line">        Employee employee=one.stream().max((s1,s2)-&gt;Double.compare(s1.getMonry()+ s1.getSalary(),s2.getMonry()+s2.getSalary()))</span><br><span class="line">                .get();<span class="comment">//因为只有一个对象，所以用不着遍历，直接用.get()即可</span></span><br><span class="line">        System.out.println(employee);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将monry+salary最高的员工封装到优秀员工类中（toppeople）</span></span><br><span class="line">        toppeople Good=one.stream().max((s1,s2)-&gt;Double.compare(s1.getMonry()+ s1.getSalary(),s2.getMonry()+s2.getSalary()))</span><br><span class="line">                .map(e-&gt;<span class="keyword">new</span> <span class="title class_">toppeople</span>(e.getName(), e.getSex())).get();</span><br><span class="line">        System.out.println(Good);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//分别统计两个部门的平均月收入（去掉最高和最低）</span></span><br><span class="line">        <span class="comment">//一部平均工资</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">            灰色部分是排序的规则，sorted()是排序的方法，</span></span><br><span class="line"><span class="comment">            应该它是原本有一个排序规则，但是我们要自定义规则，</span></span><br><span class="line"><span class="comment">            所以就直接把灰色的自定义排序规则放进去</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        one.stream().sorted((s1,s2)-&gt;Double.compare(s1.getMonry()+ s1.getSalary(),s2.getMonry()+s2.getSalary()))</span><br><span class="line">                .skip(<span class="number">1</span>).limit(one.size()-<span class="number">2</span>).forEach(e-&gt;&#123;</span><br><span class="line">                    sum += (e.getMonry()+e.getSalary());<span class="comment">//&#123;&#125;里面也算是一个方法，变量只能再一个方法里面使用，所以全局变量要定义在main方法外</span></span><br><span class="line">                &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;部门一的平均工资：&quot;</span>+sum/(one.size()-<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="https://images.xcnv.com/2022/11/02/636149f509e4b.png" alt="运行结果"></p><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Stream流是操作集合/数组的手段。<br>操作的结果数据最终要恢复到集合或者数组中去。<br>在Stream流中无法直接修改集合、数组中的数据。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
